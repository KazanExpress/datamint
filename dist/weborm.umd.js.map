{"version":3,"file":"weborm.umd.js","sources":["../src/debug.ts","../src/drivers/index.ts","../src/drivers/fallback.ts","../src/util.ts","../src/storable/entity.ts","../src/storable/record.ts","../src/repository/common.ts","../src/queryResult.ts","../src/repository/entityRepository.ts","../src/repository/recordRepository.ts","../src/repository/factory.ts","../src/orm/connection.ts","../src/orm/index.ts"],"sourcesContent":["const LOG_PREFIX = (name: string) => name ? `[WebORM:${name}]` : `[WebORM]`;\r\n\r\n/**\r\n * A type of debug errors\r\n * \r\n * - `soft` - informative, only logs to console\r\n * - `hard` - throws exceptions, forcing proper error-handling\r\n */\r\nexport type ExceptionType = 'soft' | 'hard';\r\n\r\n/**\r\n * Dictates the type of debug to set\r\n * \r\n * - `*` - debug everything\r\n * - `connection` - debug the orm connection\r\n * - `driver` - debug all drivers\r\n * - `driver:[name]` - debug a driver with [name]\r\n * - `db` - debug all repositories\r\n * - `db:[name]` - debug a repo with [name]\r\n * - `db:[name]:entity` - debug all entities in the repository\r\n * - `db:[name]:entity:[name]` - debug entity [name]\r\n */\r\nexport type DebugType = '*'\r\n  | 'connection'\r\n  | 'driver'\r\n  | 'driver:[name]'\r\n  | 'db'\r\n  | 'db:[name]'\r\n  | 'db:[name]:entity'\r\n  | 'db:[name]:entity:[name]';\r\n\r\n/**\r\n * Maps all debug types to all errors types, telling which debug type will throw\r\n */\r\nexport type IDebugMap = Partial<{\r\n  [key: string]: boolean | ExceptionType;\r\n}>;\r\n\r\nexport type LogLevel = 'log' | 'debug' | 'warn' | 'error';\r\n\r\nexport abstract class Debug {\r\n  private constructor() {}\r\n\r\n  protected static debugState: 'enabled' | 'disabled' | 'custom' = 'disabled';\r\n\r\n  /**\r\n   * Contains the map for all debug types and their respective error types for the ORM.\r\n   */\r\n  public static readonly map: IDebugMap = {};\r\n\r\n  \r\n  /**\r\n   * `true` if any debug is enabled\r\n   */\r\n  public static get isEnabled() { return this.debugState !== 'disabled'; }\r\n\r\n  /**\r\n   * Shows the current debug state of WebORM\r\n   * \r\n   * - `enabled` - all the logs and exceptions are enabled\r\n   * - `custom` - custom rules are set via a `debug()` function\r\n   * - `disabled` - all the logs and most exceptions are suppressed\r\n   */\r\n  public static get state() { return this.debugState; }\r\n  public static set state(v) { this.debugState = v; }\r\n\r\n  \r\n  public static error(instanceName: string, type: string, message: string);\r\n  public static error(instanceName: string, type: RegExp, message: string);\r\n  public static error(instanceName: string, type: DebugType, message: string);\r\n  public static error(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'error');\r\n  }\r\n\r\n  public static log(instanceName: string, type: string, message: string);\r\n  public static log(instanceName: string, type: RegExp, message: string);\r\n  public static log(instanceName: string, type: DebugType, message: string);\r\n  public static log(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'log');\r\n  }\r\n  \r\n  public static warn(instanceName: string, type: string, message: string);\r\n  public static warn(instanceName: string, type: RegExp, message: string);\r\n  public static warn(instanceName: string, type: DebugType, message: string);\r\n  public static warn(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'warn');\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the current error type for a specific type of debugging\r\n   */\r\n  public static errorType(type: string): boolean | ExceptionType;\r\n  public static errorType(type: RegExp): boolean | ExceptionType;\r\n  public static errorType(type: DebugType): boolean | ExceptionType;\r\n  public static errorType(type: string | RegExp | DebugType): boolean | ExceptionType {\r\n    if (this.map['*']) { return true; }\r\n\r\n    const isString = (t): t is string => typeof t === 'string';\r\n\r\n    if (isString(type) && this.map[type]) {\r\n      return this.map[type]!;\r\n    }\r\n\r\n    if (isString(type)) {\r\n      const matchingType = Object.keys(this.map)\r\n        .find(t => !!t && t.includes(type) && !!this.map[t]) as ExceptionType | undefined;\r\n\r\n      return matchingType || false;\r\n    }\r\n\r\n    return (Object.keys(this.map).find(t => type.test(t)) as ExceptionType | undefined) || false;\r\n  }\r\n\r\n  \r\n  public static print(instanceName: string, type: any, message: string, level: LogLevel) {\r\n    if (this.debugState !== 'disabled') {\r\n      const typeOfError = this.errorType(type);\r\n      if (typeOfError) {\r\n        if (typeOfError === 'hard' && level === 'error') {\r\n          throw new Error(`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n        } else {\r\n          console[level](`%c${LOG_PREFIX(instanceName)}%c:%c${type}%c - ${message}`,\r\n            'color: purple',\r\n            'color: initial',\r\n            'color: blue',\r\n            'color: initial'\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static decoratedLogs: any = {};\r\n\r\n  public static prints(message: string, level: LogLevel = 'log', type: DebugType = '*') {\r\n    return (target, key: string, desc: PropertyDescriptor) => {\r\n      Object.defineProperty(this.decoratedLogs, key, desc || {\r\n        value: undefined,\r\n        writable: true,\r\n        enumerable: true\r\n      });\r\n      Object.defineProperty(target, key, {\r\n        get: () => {\r\n          this.print('', type, message, level);\r\n  \r\n          return this.decoratedLogs[key];\r\n        },\r\n        set: v => {\r\n          this.decoratedLogs[key] = v;\r\n        }\r\n      });\r\n    };\r\n  }\r\n  \r\n}\r\n","import { Connection } from '../orm';\r\n\r\nexport interface IDriverConstructor extends Function {\r\n  new (connection: Connection): Driver;\r\n\r\n  readonly isSupported: boolean;\r\n}\r\n\r\nexport abstract class Driver {\r\n  constructor(\r\n    protected connection: Connection\r\n  ) {}\r\n\r\n  public abstract create<T extends object>(repositoryName: string, entity: T): Promise<T>;\r\n  public abstract read<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, id: any, data: Partial<T>): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n  public abstract delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public abstract delete<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n\r\n  /**\r\n   * Determines if the driver is supported in current environment\r\n   */\r\n  static get isSupported(): boolean {\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n","import { Driver } from '.';\r\n\r\nexport class FallbackDriver extends Driver {\r\n  public create<T extends object>(repositoryName: string, entity: T): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public read<T extends object>(repositoryName: string, id: any): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public update<T extends object>(repositoryName: string, id: any, data: Partial<T>): Promise<T>;\r\n  public update<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n  public async update(repositoryName: any, id: any, data?: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n  public delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public delete<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n  public async delete(repositoryName: any, entity: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * fromPath\r\n * Returns a value from an object by a given path (usually string).\r\n *\r\n * https://gist.github.com/Raiondesu/759425dede5b7ff38db51ea5a1fb8f11\r\n *\r\n * @param obj an object to get a value from.\r\n * @param path to get a value by.\r\n * @param splitter to split the path by. Default is '.' ('obj.path.example')\r\n * @returns a value from a given path. If a path is invalid - returns undefined.\r\n */\r\nexport function fromPath(obj, path, splitter = '.') {\r\n  if (!path)\r\n    return obj;\r\n\r\n  if (typeof path === 'number' || !~path.indexOf(splitter))\r\n    return obj[path];\r\n\r\n  return path.split(splitter).reduce((o, i) => (o === Object(o) ? o[i] : o), obj);\r\n}\r\n\r\nexport function NonEnumerable(target: object, key: string, desc: PropertyDescriptor = {}) {\r\n  Object.defineProperty(target, key, {\r\n    ...desc,\r\n\r\n    // TODO: check to be writable\r\n    enumerable: false\r\n  });\r\n}\r\n\r\nexport type Key = string | number | symbol;\r\n","import { Key, NonEnumerable } from '../util';\r\nimport { IStorable } from './istorable';\r\n\r\nexport class Entity<\r\n  IDKey extends Key = string,\r\n  ID = any\r\n> implements IStorable {\r\n  // TODO: check to be writable\r\n  @NonEnumerable\r\n  private __col__: Array<string> = [];\r\n\r\n  @NonEnumerable\r\n  private __idCol__?: IDKey;\r\n\r\n  @NonEnumerable\r\n  private __idValue__?: ID;\r\n\r\n  constructor(options) {\r\n    if (this.__idCol__) {\r\n      this.__idValue__ = options[this.__idCol__];\r\n    }\r\n  }\r\n\r\n  public $save() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public $delete() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public static Column(target: typeof Entity['prototype'], key: string) {\r\n    target.__col__.push(key);\r\n  }\r\n\r\n  public static ID(target: typeof Entity['prototype'], key: string) {\r\n    target.__idCol__ = key;\r\n  }\r\n}\r\n\r\nexport const Column = Entity.Column;\r\nexport const ID = Entity.ID;\r\n","import { IStorable } from './istorable';\r\n\r\nexport class Record implements IStorable {\r\n  public $save(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public $delete(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n","import { Debug } from '../debug';\r\nimport { Connection } from '../orm';\r\nimport { Entity, IStorable, IStorableConstructor, Record } from '../storable';\r\nimport { EntityRepository } from './entityRepository';\r\nimport { RecordRepository } from './recordRepository';\r\n\r\n/**\r\n * @TODO:\r\n * - Async API MAP crap for handling QueryResults\r\n */\r\n\r\nexport class Repository<\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n> {\r\n  constructor(\r\n    public name: string,\r\n    public readonly connection: Connection<any>,\r\n    protected Data: C\r\n  ) {\r\n    if (\r\n      // If this class was instantiated directly (without inheritance)\r\n      Repository.prototype === this.constructor.prototype\r\n\r\n      // And set debug for db:[name]\r\n      && Debug.map[`db:${name}`]\r\n    ) {\r\n      Debug.warn(connection.name, `db:${name}`, `Using default empty repository for ${name}`);\r\n    }\r\n  }\r\n}\r\n","type PromiseExecutor<T> = (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void;\r\n\r\n/**\r\n * Incapsulates the query result data for further manipulation\r\n *\r\n * @template T the type of data encapsulated\r\n */\r\nexport class QueryResult<T> {\r\n  private _ok: boolean;\r\n  private _result: Promise<T>;\r\n  private handlers: Function[] = [];\r\n\r\n  constructor(ok: boolean, result: PromiseExecutor<T>, error?: Error);\r\n  constructor(ok: boolean, result: Promise<T>, error?: Error);\r\n  constructor(\r\n    ok: boolean,\r\n    result: Promise<T> | PromiseExecutor<T>,\r\n    public readonly error?: Error\r\n  ) {\r\n    this._ok = ok;\r\n\r\n    let promise: Promise<T>;\r\n\r\n    if (typeof result === 'function') {\r\n      promise = new Promise(result);\r\n    } else {\r\n      promise = result;\r\n    }\r\n\r\n    this._result = promise;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the incapsulated data is OK and contains no errors\r\n   */\r\n  public get ok() { return this._ok; }\r\n\r\n  /**\r\n   * The resulting data of the query request\r\n   */\r\n  public get result() { return this._result; }\r\n  public set result(value: Promise<T>) {\r\n    this._result = value;\r\n    this.handlers.forEach(async h => h());\r\n  }\r\n\r\n\r\n  /**\r\n   * Fires a handler whenever the data in the result has been changed\r\n   *\r\n   * @param callback the callback to fire\r\n   */\r\n  public onChange(callback: Function) {\r\n    this.handlers.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the callback from the result data changes\r\n   */\r\n  public offChange(callback: Function) {\r\n    const idx = this.handlers.indexOf(callback);\r\n\r\n    if (idx > -1) {\r\n      this.handlers.splice(idx, 1);\r\n    }\r\n  }\r\n}\r\n","import { Repository } from './common';\r\nimport { Entity, IStorable, IStorableConstructor } from '../storable';\r\nimport { Connection } from '../orm/connection';\r\nimport { QueryResult } from '../queryResult';\r\nimport { Key } from '../util';\r\n\r\ntype PartialWithId<T, ID, IDKey extends Key> = Partial<T> & {\r\n  [key in IDKey]: ID;\r\n};\r\n\r\nexport class EntityRepository<\r\n  // TODO: hide most of the generic params from end-user...\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n  ID = E extends Entity<string, infer IdType> ? IdType : any,\r\n  IDKey extends string = E extends Entity<infer IdKey, unknown> ? IdKey : string,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0]\r\n> extends Repository<C, E> {\r\n  public readonly columns: Array<string>;\r\n  public readonly primaryKey: string | number;\r\n\r\n  constructor(\r\n    name: string,\r\n    connection: Connection<any>,\r\n    entity: C\r\n  ) {\r\n    super(name, connection, entity);\r\n    this.primaryKey = entity.prototype.__id__;\r\n    this.columns = Object.keys(entity.prototype.__col__);\r\n    delete entity.prototype.__col__;\r\n  }\r\n\r\n  public add(options: A): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data(options))\r\n    );\r\n  }\r\n\r\n  public get(id: ID): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n\r\n  public update(options: PartialWithId<A, ID, IDKey>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n\r\n  public updateById(id: ID, query: (entity: E) => Partial<A>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n\r\n  public delete(id: ID): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n\r\n  // TODO: Find, find by, etc...\r\n}\r\n","import { Repository } from './common';\r\nimport { IStorable, IStorableConstructor } from '../storable';\r\nimport { QueryResult } from '../queryResult';\r\n\r\nexport class RecordRepository<\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0]\r\n> extends Repository<C, E> {\r\n  public create(options: A): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data(options))\r\n    );\r\n  }\r\n\r\n  public update(options: Partial<A>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data(options))\r\n    );\r\n  }\r\n\r\n  public read(): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n\r\n  public delete(): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      Promise.resolve(new this.Data({}))\r\n    );\r\n  }\r\n}\r\n","import { IStorableConstructor, IStorable, Entity, Record } from '../storable';\r\nimport { Connection } from '../orm/connection';\r\nimport { EntityRepository } from './entityRepository';\r\nimport { RecordRepository } from './recordRepository';\r\nimport { Debug } from '../debug';\r\nimport { Repository } from './common';\r\n\r\nexport function makeRepository<\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n>(name: string, connection: Connection<any>, data: C) {\r\n  if (data.prototype instanceof Entity) {\r\n    return new EntityRepository<C, E, any, any, any>(name, connection, data);\r\n  } else if (data.prototype instanceof Record) {\r\n    return new RecordRepository<C, E>(name, connection, data);\r\n  } else {\r\n    Debug.error(connection.name, 'db', `No suitable repository found for ${data.name} when trying to connect with ${name}.`);\r\n\r\n    return new Repository<C, E>(name, connection, data);\r\n  }\r\n}\r\n","import { Debug, DebugType, ExceptionType } from '../debug';\r\nimport { Driver, IDriverConstructor } from '../drivers';\r\nimport { FallbackDriver } from '../drivers/fallback';\r\nimport { EntityRepository, makeRepository, Repository } from '../repository';\r\nimport { RecordRepository } from '../repository/recordRepository';\r\nimport { Entity, IStorableConstructor, Record } from '../storable';\r\n\r\nexport interface IRepositoryMap {\r\n  [name: string]: IStorableConstructor<any>;\r\n}\r\n\r\nexport type RepoStore<M extends IRepositoryMap> = {\r\n  [name in keyof M]: InstanceType<M[name]> extends Entity ? EntityRepository<M[name]>\r\n    : (InstanceType<M[name]> extends Record ? RecordRepository<M[name]> : Repository<M[name]>);\r\n};\r\n\r\nexport class Connection<T extends IRepositoryMap> {\r\n  // TODO\r\n  // public static readonly plugins: WebORM.IPlugin[] = [];\r\n\r\n  /**\r\n   * The driver currently used for operations with entities\r\n   */\r\n  public currentDriver: Driver;\r\n\r\n  /**\r\n   * A current map of bound repositories\r\n   */\r\n  public repositories: RepoStore<T> = {} as any;\r\n\r\n  /**\r\n   * Creates a WebORM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current entity structure\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public drivers: IDriverConstructor[],\r\n    repositories: T,\r\n    private apiMap?: any // TODO\r\n  ) {\r\n    // Select the first supported driver from the bunch\r\n    const SupportedDriver = drivers.find(d => d.isSupported);\r\n\r\n    if (SupportedDriver) {\r\n      // TODO: multi-driver mode\r\n      Debug.log(\r\n        this.name,\r\n        'orm',\r\n        `Using driver \"${SupportedDriver.name}\" as the first supported driver`\r\n      );\r\n\r\n      this.currentDriver = new SupportedDriver(this);\r\n    } else {\r\n      Debug.warn(\r\n        this.name,\r\n        'orm',\r\n        'No supported driver provided. Using fallback.'\r\n      );\r\n\r\n      this.currentDriver = new FallbackDriver(this);\r\n    }\r\n\r\n    let reProxy;\r\n\r\n    if (!Proxy) {\r\n      Debug.warn(\r\n        this.name,\r\n        'orm',\r\n        `window.Proxy is unavailable. Using insufficient property forwarding.`\r\n      );\r\n\r\n      reProxy = (repoName: string) => Object.defineProperty(this, repoName, {\r\n        get: () => this.repositories[repoName],\r\n      });\r\n    }\r\n\r\n    for (const repoName in repositories) {\r\n      const entityConstructor = repositories[repoName];\r\n\r\n      this.repositories[repoName] = makeRepository(repoName, this, entityConstructor) as any;\r\n\r\n      reProxy && reProxy(repoName);\r\n    }\r\n\r\n    if (Proxy) {\r\n      Debug.log(\r\n        this.name,\r\n        'orm',\r\n        `window.Proxy is available. Using modern property forwarding.`\r\n      );\r\n\r\n      return new Proxy(this, {\r\n        get(target, key: string) {\r\n          if (!target.repositories[key]) {\r\n            if (!target[key]) {\r\n              Debug.log(\r\n                target.name,\r\n                'orm',\r\n                `Repository \"${key}\" is not registered upon initialization. No other property with the same name was found.`\r\n              );\r\n            }\r\n\r\n            return target[key];\r\n          }\r\n\r\n          return target.repositories[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region Debug\r\n\r\n  /**\r\n   * Enable a certain debug option for WebORM\r\n   *\r\n   * Allows for detailed debug type - exception type mapping.\r\n   */\r\n  public static debug(enabled: boolean): void;\r\n  public static debug(type: DebugType): void;\r\n  public static debug(type: DebugType, exceptions: ExceptionType): void;\r\n  public static debug(type: string): void;\r\n  public static debug(type: string, exceptions: ExceptionType): void;\r\n  public static debug(type: boolean | string, exceptions?: ExceptionType) {\r\n    if (typeof type === 'boolean') {\r\n      Debug.state = (type ? 'enabled' : 'disabled');\r\n    } else {\r\n      Debug.state = ('custom');\r\n\r\n      Debug.map[type] = exceptions || !Debug.map[type];\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { IDriverConstructor } from '../drivers';\r\nimport { Connection as connection, IRepositoryMap, RepoStore } from './connection';\r\n\r\nexport const Connection = connection as {\r\n  /**\r\n   * Creates a WebORM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current entity structure.\r\n   */\r\n  new <T extends IRepositoryMap>(\r\n      name: string,\r\n      drivers: IDriverConstructor[],\r\n      repositories: T,\r\n      apiMap?: any // TODO\r\n  ): connection<T> & RepoStore<T>;\r\n} & typeof connection;\r\n\r\nexport type Connection<T extends IRepositoryMap = any> = connection<T>;\r\n\r\nexport * from './namespace';\r\n\r\n"],"names":["tslib_1.__extends","tslib_1.__decorate","Connection","connection"],"mappings":"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"}