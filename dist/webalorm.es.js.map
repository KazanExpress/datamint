{"version":3,"file":"webalorm.es.js","sources":["../src/decorators/index.ts","../src/debug/module.ts","../src/debug/debugable.ts","../src/debug/index.ts","../src/connection/connection.ts","../src/connection/index.ts","../src/drivers/base.ts","../src/drivers/fallback.ts","../src/drivers/multiDriver.ts","../src/repository/base.ts","../src/queryResult.ts","../src/repository/entity.ts","../src/repository/record.ts","../src/repository/remote.ts","../src/storable/base.ts","../src/storable/entity.ts","../src/storable/record.ts"],"sourcesContent":["export const enumerable = (isEnumerable: boolean = true) => function (target: object, key: string, desc?: any) {\r\n  let descriptor = Object.getOwnPropertyDescriptor(target, key) || desc || {};\r\n  if (descriptor.enumerable != isEnumerable) {\r\n    descriptor.enumerable = !!isEnumerable;\r\n    if (descriptor.get || descriptor.set) {\r\n      descriptor.configurable = descriptor.configurable === undefined ? true : descriptor.configurable;\r\n    } else {\r\n      descriptor.writable = descriptor.writable === undefined ? true : descriptor.writable;\r\n    }\r\n    Reflect.deleteProperty(target, key);\r\n    Object.defineProperty(target, key, descriptor);\r\n  }\r\n};\r\n","const LOG_PREFIX = (name: string) => name ? `[webalorm:${name}]` : `[webalorm]`;\r\n\r\n/**\r\n * A type of debug errors\r\n *\r\n * - `soft` - informative, only logs to console\r\n * - `hard` - throws exceptions, forcing proper error-handling\r\n */\r\nexport type ExceptionType = 'soft' | 'hard';\r\n\r\n/**\r\n * Dictates the type of debug to set\r\n *\r\n * - `*` - debug everything\r\n * - `connection` - debug the orm connection\r\n * - `driver` - debug all drivers\r\n * - `driver:${name}` - debug a driver with ${name}\r\n * - `db` - debug all repositories\r\n * - `db:${name}` - debug a repo with ${name}\r\n * - `db:${name}:entity` - debug all entities in the repository\r\n */\r\nexport type DebugType = '*'\r\n  | 'connection'\r\n  | 'driver'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'driver:${name}'\r\n  | 'db'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}:entity';\r\n\r\nexport type DebugState = 'enabled' | 'disabled' | 'custom';\r\n\r\n/**\r\n * Maps all debug types to all errors types, telling which debug type will throw\r\n */\r\nexport type DebugMap = Partial<{\r\n  [key: string]: boolean | ExceptionType;\r\n}>;\r\n\r\nexport type LogLevel = 'log' | 'debug' | 'warn' | 'error';\r\n\r\n\r\n/**\r\n * Shows the current debug state of WEBALORM\r\n *\r\n * - `enabled` - all the logs and exceptions are enabled\r\n * - `custom` - custom rules are set via a `debug()` function\r\n * - `disabled` - all the logs and most exceptions are suppressed\r\n */\r\nexport let debugState: DebugState = 'disabled';\r\n\r\n\r\n/**\r\n * Contains the map for all debug types and their respective error types for the ORM.\r\n */\r\nexport const debugMap: DebugMap = {};\r\n\r\nexport function setDebugState(state: DebugState) {\r\n  debugState = state;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Returns the current error type for a specific type of debugging\r\n */\r\nexport function errorTypeFor(type: string): boolean | ExceptionType;\r\nexport function errorTypeFor(type: RegExp): boolean | ExceptionType;\r\nexport function errorTypeFor(type: DebugType): boolean | ExceptionType;\r\nexport function errorTypeFor(type: string | RegExp | DebugType): boolean | ExceptionType {\r\n  if (debugMap['*']) { return debugMap['*']!; }\r\n\r\n  const isString = (t): t is string => typeof t === 'string';\r\n\r\n  if (isString(type) && debugMap[type]) {\r\n    return debugMap[type]!;\r\n  }\r\n\r\n  if (isString(type)) {\r\n    const matchingType = Object.keys(debugMap)\r\n      .find(t => !!t && t.includes(type) && !!debugMap[t]) as ExceptionType | undefined;\r\n\r\n    return matchingType || false;\r\n  }\r\n\r\n  return (Object.keys(debugMap).find(t => type.test(t)) as ExceptionType | undefined) || false;\r\n}\r\n\r\n\r\nexport function print(instanceName: string, type: any, message: any, level: LogLevel, force: boolean = false) {\r\n  if ((debugState !== 'disabled') || force) {\r\n    const errorType = errorTypeFor(type);\r\n    if (errorType) {\r\n      if (errorType === 'hard' && level === 'error') {\r\n        throw new Error(`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n      } else {\r\n        if (typeof window !== 'undefined') {\r\n          window.console[level](`%c${LOG_PREFIX(instanceName)}%c:%c${type}%c - ${message}`,\r\n            'color: purple',\r\n            'color: initial',\r\n            'color: blue',\r\n            'color: initial'\r\n          );\r\n        } else {\r\n          console[level](`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { enumerable } from '../decorators';\r\nimport { DebugType, errorTypeFor, LogLevel, print } from './module';\r\n\r\nexport abstract class Debugable {\r\n  /**\r\n   * The debug type for this class' actions\r\n   */\r\n  @enumerable(false)\r\n  protected readonly abstract $debugType: DebugType;\r\n\r\n  /**\r\n   * The name of the WEBALORM connection this class uses\r\n   */\r\n  @enumerable(false)\r\n  protected readonly abstract $connectionName: string;\r\n\r\n  /**\r\n   * `true` if the debug is enabled for this class\r\n   */\r\n  @enumerable(false)\r\n  public get $debugEnabled() { return errorTypeFor(this.$debugType); }\r\n\r\n  @enumerable(false)\r\n  private $logFactory(level: LogLevel) {\r\n    return (message, force: boolean = false) =>\r\n      print(this.$connectionName, this.$debugType, message, level, force);\r\n  }\r\n\r\n  @enumerable(false)\r\n  protected readonly $log = this.$logFactory('log');\r\n  @enumerable(false)\r\n  protected readonly $warn = this.$logFactory('warn');\r\n  @enumerable(false)\r\n  protected readonly $error = this.$logFactory('error');\r\n  @enumerable(false)\r\n  protected readonly $debug = this.$logFactory('debug');\r\n}\r\n\r\nexport class DebugInstance extends Debugable {\r\n  constructor(\r\n    protected $debugType: DebugType,\r\n    protected $connectionName: string\r\n  ) { super(); }\r\n\r\n  public $log!: Debugable['$log'];\r\n  public $warn!: Debugable['$warn'];\r\n  public $error!: Debugable['$error'];\r\n  public $debug!: Debugable['$debug'];\r\n}\r\n","import { Debugable } from './debugable';\r\nimport { debugMap, debugState, DebugType } from './module';\r\n\r\nclass GlobalDebug extends Debugable {\r\n  protected $debugType: DebugType = '*';\r\n  protected $connectionName: string = '';\r\n  private constructor() { super(); }\r\n\r\n  public static readonly instance = new GlobalDebug();\r\n\r\n  public $log!: Debugable['$log'];\r\n  public $warn!: Debugable['$warn'];\r\n  public $error!: Debugable['$error'];\r\n  public $debug!: Debugable['$debug'];\r\n\r\n  public get map() {\r\n    return debugMap;\r\n  }\r\n\r\n  public get state() {\r\n    return debugState;\r\n  }\r\n}\r\n\r\nexport const Debug = GlobalDebug.instance;\r\n\r\nexport * from './debugable';\r\nexport * from './module';\r\n\r\n","import { Debugable, debugMap, DebugState, debugState, DebugType, ExceptionType, setDebugState } from '../debug';\r\nimport { DataMap, RepoFactory, Repository } from '../repository/base';\r\n\r\nexport interface IRepositoryMap {\r\n  [name: string]: RepoFactory<any>;\r\n}\r\n\r\nexport type RepoStore<M extends IRepositoryMap> = {\r\n  [Name in keyof M]: ReturnType<M[Name]>;\r\n};\r\n\r\nexport class Connection<\r\n  RM extends IRepositoryMap = IRepositoryMap,\r\n> extends Debugable {\r\n  protected $debugType: DebugType = `connection`;\r\n  protected $connectionName: string = this.name;\r\n\r\n  /**\r\n   * A current map of bound repositories\r\n   */\r\n  public readonly repositories: RepoStore<RM> = {} as any;\r\n\r\n  /**\r\n   * Creates a connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param repositories sets the relation of a repository name to its contents' options.\r\n   */\r\n  constructor(\r\n    public readonly name: string,\r\n    repositories: RM,\r\n  ) {\r\n    super();\r\n\r\n    let reProxy;\r\n\r\n    if (!Proxy) {\r\n      this.$warn(`Proxy is unavailable. Using insufficient property forwarding.`);\r\n\r\n      reProxy = (repoName: string) => Object.defineProperty(this, repoName, {\r\n        get: () => this.repositories[repoName],\r\n      });\r\n    }\r\n\r\n    for (const repoName in repositories) {\r\n      this.repositories[repoName] = repositories[repoName](repoName, this);\r\n\r\n      reProxy && reProxy(repoName);\r\n    }\r\n\r\n    // Make repositories immutable\r\n    this.repositories = Object.freeze(this.repositories);\r\n\r\n    if (Proxy) {\r\n      this.$log(`Proxy is available. Using modern property forwarding.`);\r\n\r\n      return new Proxy(this, {\r\n        get(target, key: string) {\r\n          if (!target.repositories[key]) {\r\n            if (typeof target[key] === 'undefined') {\r\n              target.$warn(\r\n                `Repository \"${key}\" is not registered upon initialization. No other property with the same name was found.`\r\n              );\r\n            }\r\n\r\n            return target[key];\r\n          }\r\n\r\n          return target.repositories[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region Debug\r\n\r\n  /**\r\n   * Returns a truthy value if debug is currently enabled\r\n   *\r\n   * Returns a falsy value if debug is currently disabled\r\n   */\r\n  public static $debug(): DebugState;\r\n  /**\r\n   * Enable or disable all debug logs\r\n   */\r\n  public static $debug(enabled: boolean): void;\r\n  /**\r\n   * Enable or disable all debug logs.\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(enabled: boolean, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   */\r\n  public static $debug(type: DebugType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: DebugType, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   */\r\n  public static $debug(type: string): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: string, exceptions: ExceptionType): void;\r\n  public static $debug(type?: boolean | string, exceptions?: ExceptionType) {\r\n    if (typeof type === 'undefined') {\r\n      return debugState;\r\n    }\r\n\r\n    if (typeof type === 'boolean') {\r\n      setDebugState(type ? 'enabled' : 'disabled');\r\n      debugMap['*'] = exceptions || type;\r\n    } else {\r\n      setDebugState('custom');\r\n\r\n      debugMap[type] = exceptions || !debugMap[type];\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { Connection as connection, IRepositoryMap, RepoStore } from './connection';\r\n\r\nexport const Connection = connection as {\r\n  /**\r\n   * Creates a connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   */\r\n  new <\r\n    RM extends IRepositoryMap = IRepositoryMap\r\n  >(\r\n      name: string,\r\n      repositories: RM,\r\n  ): connection<RM> & RepoStore<RM>;\r\n} & typeof connection;\r\n\r\nexport type Connection<\r\n  RM extends IRepositoryMap = any\r\n> = connection<RM>;\r\n\r\n","import { Debugable, DebugType } from '../debug';\r\nimport { Connection } from '../connection';\r\nimport { IRepoData } from '../repository';\r\n\r\nexport interface IDriverConstructor extends Function {\r\n  new (connection: Connection): Driver;\r\n\r\n  readonly isSupported: boolean;\r\n}\r\n\r\nexport abstract class Driver extends Debugable {\r\n  protected $debugType: DebugType = 'driver';\r\n  protected $connectionName: string = this.connection.name;\r\n\r\n  constructor(\r\n    protected connection: Connection\r\n  ) { super(); }\r\n\r\n  /* TODO: additional driver functionality?.. */\r\n\r\n\r\n  public abstract create<A extends object, R extends IRepoData>(\r\n    repository: R,\r\n    data: A\r\n  ): Promise<A>;\r\n\r\n  public abstract findById<A extends object, R extends IRepoData, ID extends PropertyKey>(\r\n    repository: R,\r\n    id: ID\r\n  ): Promise<A | undefined>;\r\n\r\n  public abstract update<A extends object, R extends IRepoData>(\r\n    repository: R,\r\n    data: Partial<A>\r\n  ): Promise<Array<A>>;\r\n\r\n  public abstract updateOne<A extends object, R extends IRepoData, ID extends PropertyKey>(\r\n    repository: R,\r\n    id: ID,\r\n    query: ((entity: A) => Partial<A>) | Partial<A>\r\n  ): Promise<A | undefined>;\r\n\r\n  public abstract delete<A extends object, R extends IRepoData>(\r\n    repository: R,\r\n    data: Partial<A>\r\n  ): Promise<Array<A>>;\r\n\r\n  public abstract deleteOne<A extends object, R extends IRepoData, ID extends PropertyKey>(\r\n    repository: R,\r\n    id: ID\r\n  ): Promise<A | undefined>;\r\n\r\n  /**\r\n   * Determines if the driver is supported in current environment\r\n   */\r\n  static get isSupported(): boolean {\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n","import { IRepoData } from '../repository';\r\nimport { Driver } from './base';\r\n\r\n/**\r\n * @todo refactor, code is a mess\r\n */\r\nexport class FallbackDriver extends Driver {\r\n  public async create<A, R extends IRepoData>({ primaryKey, name }: R, data: A): Promise<A> {\r\n    if (!this.repositoryMap[name]) {\r\n      if ({ primaryKey, name }.primaryKey) {\r\n        this.repositoryMap[name] = {};\r\n      } else {\r\n        this.repositoryMap[name] = [];\r\n      }\r\n    }\r\n\r\n    const repo: Array<A> | { [key: string]: A } = this.repositoryMap[name];\r\n\r\n    if (primaryKey) {\r\n      const key = String(data[primaryKey]);\r\n\r\n      repo[key] = data;\r\n    } else if (Array.isArray(repo)) {\r\n      repo.push(data);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  public async findById<A, R extends IRepoData>({ primaryKey, name }: R, id: PropertyKey) {\r\n    const repo: Array<A> | { [key: string]: A } = this.repositoryMap[name];\r\n\r\n    if (primaryKey) {\r\n      if (Array.isArray(repo)) {\r\n        return repo.find(i => i[primaryKey] === id);\r\n      } else {\r\n        if (primaryKey) {\r\n          let result: A | undefined = repo[String(id)];\r\n\r\n          if (!result) {\r\n            result = Object.values(repo).find(i => i[primaryKey] === id);\r\n          }\r\n\r\n          return result;\r\n        } else if (id) {\r\n          return repo[String(id)];\r\n        }\r\n      }\r\n    } else if (Array.isArray(repo)) {\r\n      return repo[id];\r\n    }\r\n\r\n    return Object.values(repo)[0];\r\n  }\r\n\r\n  public async update<A, R extends IRepoData>(\r\n    { name, primaryKey }: R,\r\n    data: Partial<A>\r\n  ): Promise<Array<A>> {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return [] as Array<A>;\r\n  }\r\n\r\n  public async updateOne<A extends object, R extends IRepoData>(\r\n    { name, primaryKey }: R,\r\n    id: PropertyKey,\r\n    query: ((entity: A) => Partial<A>) | Partial<A>\r\n  ): Promise<A | undefined> {\r\n    const repo = this.repositoryMap[name];\r\n\r\n    let res: A | undefined = undefined;\r\n\r\n    const mixInQuery = (obj: A): A => typeof query === 'function' ? (\r\n        { ...obj as object, ...query(obj) as object } as A\r\n      ) : (\r\n        { ...obj as object, ...query as object } as A\r\n      );\r\n\r\n    if (primaryKey) {\r\n      if (Array.isArray(repo)) {\r\n        const idx = repo.findIndex(i => i[primaryKey] === id);\r\n\r\n        if (idx === -1) {\r\n          this.$error(`No entity by id ${String(id)} was found`);\r\n\r\n          return res;\r\n        }\r\n\r\n        repo[idx] = res = mixInQuery(repo[idx]);\r\n      } else {\r\n        repo[id] = res = mixInQuery(repo[id]);\r\n      }\r\n    } else if (Array.isArray(repo) && typeof id === 'number') {\r\n      repo[id] = res = mixInQuery(repo[id]);\r\n    } else {\r\n      this.$error(`Id ${String(id)} is of the wrong type ${typeof id}`);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  public async deleteOne<A, R extends IRepoData>({ name, primaryKey }: R, id: PropertyKey): Promise<A | undefined> {\r\n    const repo = this.repositoryMap[name];\r\n\r\n    let res: A;\r\n\r\n    if (primaryKey) {\r\n      if (Array.isArray(repo)) {\r\n        const idx = repo.findIndex(i => i[primaryKey] === id);\r\n\r\n        res = repo[idx];\r\n\r\n        repo.splice(idx, 1);\r\n      } else {\r\n        res = repo[id];\r\n\r\n        repo[id] = undefined;\r\n        delete repo[id];\r\n      }\r\n    } else if (Array.isArray(repo) && typeof id === 'number') {\r\n      res = repo[id];\r\n\r\n      repo.splice(id, 1);\r\n    } else {\r\n      throw new Error(`Id ${String(id)} is of the wrong type ${typeof id}`);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  public async delete<A, R extends IRepoData>({ name, primaryKey }: R, entity: Partial<A>): Promise<Array<A>> {\r\n    const repo = this.repositoryMap[name];\r\n\r\n    let res;\r\n\r\n    // if (isEntityRepo(repository)) {\r\n    //   const key = Object.keys(repo).findIndex(e => Object.keys(repo[e]).some(key => {\r\n    //     return e[key] === entity[key];\r\n    //   }));\r\n\r\n    //   res = this.repositoryMap[repository.name][key];\r\n\r\n    //   this.repositoryMap[repository.name][key] = undefined;\r\n\r\n    //   delete this.repositoryMap[repository.name][key];\r\n    // } else {\r\n    //   res = this.repositoryMap[repository.name];\r\n\r\n    //   this.repositoryMap[repository.name] = undefined;\r\n    // }\r\n\r\n    return res;\r\n  }\r\n\r\n  private repositoryMap: any = {};\r\n}\r\n","import { Connection } from '../connection';\r\nimport { IRepoData } from '../repository';\r\nimport { Driver, IDriverConstructor } from './base';\r\n\r\nexport class MultiDriver extends Driver {\r\n  private drivers: Driver[];\r\n\r\n  constructor(\r\n    connection: Connection,\r\n    drivers: IDriverConstructor[]\r\n  ) {\r\n    super(connection);\r\n\r\n    this.drivers = drivers.filter(d => d.isSupported).map(D => new D(connection));\r\n  }\r\n\r\n  private request(\r\n    type: { [key in keyof Driver]: Driver[key] extends Function ? key : never }[keyof Driver]\r\n  ) {\r\n    return function (this: MultiDriver) {\r\n      const args = arguments;\r\n      const allResponses = Promise.all(this.drivers.map(d => d[type].apply(d, args)));\r\n\r\n      return allResponses[0];\r\n    }.bind(this);\r\n  }\r\n\r\n  public readonly create: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, data: A): Promise<A>;\r\n  } = this.request('create');\r\n\r\n  public readonly findById: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any): Promise<A>;\r\n  } = this.request('findById');\r\n\r\n  public readonly update: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, data: Partial<A>): Promise<Array<A>>;\r\n  } = this.request('update');\r\n\r\n  public readonly updateOne: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any, query: (data: A) => Partial<A>): Promise<A | undefined>;\r\n  } = this.request('updateOne');\r\n\r\n  public readonly deleteOne: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any): Promise<A>;\r\n  } = this.request('deleteOne');\r\n\r\n  public readonly delete: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, data: Partial<A>): Promise<Array<A>>;\r\n  } = this.request('delete');\r\n\r\n  public static get isSupported() { return true; }\r\n}\r\n","import { Debug, Debugable, DebugType } from '../debug';\r\nimport { FallbackDriver, IDriverConstructor } from '../drivers';\r\nimport { MultiDriver } from '../drivers/multiDriver';\r\nimport { Connection } from '../connection';\r\nimport { IStorableConstructor, Storable } from '../storable';\r\n\r\nexport interface IRepoData<IDKey = PropertyKey> {\r\n  readonly name: string;\r\n  readonly columns?: Array<string>;\r\n  readonly primaryKey?: IDKey;\r\n}\r\n\r\nexport type FromSecArg<\r\n  T extends undefined | ((arg: any, other: any) => any)\r\n> = T extends ((arg: any, other: infer U) => any) ? U : undefined;\r\n\r\nexport type DataMap<C extends IStorableConstructor<any>, Keys extends string = string> = {\r\n  [key in Keys]: ((...args: any[]) => Promise<InstanceType<C>>) | undefined;\r\n};\r\n\r\nexport abstract class Repository<\r\n  DM,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Debugable {\r\n  protected readonly $debugType: DebugType = `db:${this.name.toLowerCase()}` as DebugType;\r\n\r\n  constructor(\r\n    public readonly name: string,\r\n    public readonly $connectionName: string,\r\n    private readonly Data: C,\r\n    protected readonly api?: DM,\r\n  ) {\r\n    super();\r\n\r\n    if (!api) {\r\n      this.$warn('The main functionality is disabled. Are you sure you want to use this without API?', true);\r\n    }\r\n\r\n    if (/* this class was instantiated directly (without inheritance) */\r\n      Repository.prototype === this.constructor.prototype\r\n    ) {\r\n      if (this.$debugEnabled) {\r\n        this.$error(`Using default empty repository.`);\r\n      } else {\r\n        Debug.$error(`Using default empty repository for ${name}`, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected makeDataInstance(options: A): E {\r\n    // Cast to any to allow passing `this` as a second arg for classes implementing IActiveRecord to work\r\n    return new (this.Data as any)(options, this);\r\n  }\r\n}\r\n\r\nexport interface IRepoFactoryOptions<C, D> {\r\n  model: C;\r\n  api: D;\r\n}\r\n\r\nexport type RepoFactory<Repo extends Repository<any, any> = Repository<any, any>> = (name: string, connection: Connection) => Repo;\r\n\r\nexport function selectDriver(drivers: IDriverConstructor | IDriverConstructor[], repoName: string): IDriverConstructor {\r\n  const error = () => {\r\n    let msg: string = `No supported driver provided for ${repoName}.`;\r\n\r\n    if (Debug.map['*'] !== 'hard') {\r\n      msg += ' Using fallback.';\r\n    }\r\n\r\n    Debug.$error(msg);\r\n  };\r\n\r\n  if (Array.isArray(drivers)) {\r\n    // Select the first supported driver from the bunch\r\n    const SupportedDrivers = drivers.filter(d => d.isSupported);\r\n    if (SupportedDrivers.length > 0) {\r\n      return SupportedDrivers[0];\r\n    } else {\r\n      return error(), FallbackDriver;\r\n    }\r\n  } else if (drivers instanceof MultiDriver) {\r\n    return drivers;\r\n  } else {\r\n    return error(), FallbackDriver;\r\n  }\r\n}\r\n","/**\r\n * Incapsulates the query result data for further manipulation\r\n *\r\n * @template T the type of data encapsulated\r\n */\r\nexport class QueryResult<T> {\r\n  private _ok: boolean;\r\n  private _result: T;\r\n  private _error?: Error;\r\n  private handlers: ((error?: Error, result?: T) => any)[] = [];\r\n\r\n  constructor(ok: boolean, result: T, error?: Error) {\r\n    this._ok = ok;\r\n    this._result = result;\r\n    this._error = error;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the incapsulated data is OK and contains no errors\r\n   */\r\n  public get ok() { return this._ok; }\r\n\r\n  /**\r\n   * The resulting data of the query request\r\n   */\r\n  public get result() { return this._result; }\r\n  public set result(value) {\r\n    this._ok = true;\r\n    this._result = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * The error of the query (if any)\r\n   */\r\n  public get error() { return this._error; }\r\n  public set error(value) {\r\n    this._ok = false;\r\n    this._error = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * Fires a handler whenever the data in the result has been changed\r\n   *\r\n   * @param callback the callback to fire\r\n   */\r\n  public onChange(callback: (error?: Error, result?: T) => any) {\r\n    this.handlers.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the callback from the result data changes\r\n   */\r\n  public offChange(callback: (error?: Error, result?: T) => any) {\r\n    const idx = this.handlers.indexOf(callback);\r\n\r\n    if (idx > -1) {\r\n      this.handlers.splice(idx, 1);\r\n    }\r\n  }\r\n}\r\n","import { Driver, FallbackDriver, IDriverConstructor } from '../drivers';\r\nimport { Connection } from '../connection/connection';\r\nimport { QueryResult } from '../queryResult';\r\nimport { IStorableConstructor } from '../storable';\r\nimport { Entity } from '../storable/entity';\r\nimport { FromSecArg, IRepoData, RepoFactory, IRepoFactoryOptions, Repository, selectDriver } from './base';\r\n\r\nexport type PartialWithId<T, IDValue, IDKey extends PropertyKey> = {\r\n  [key in IDKey]: IDValue;\r\n} & Partial<T>;\r\n\r\nexport interface IEntityRepoMethods<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  IDKey extends PropertyKey = E extends Entity<infer IdKey, any> ? IdKey : PropertyKey,\r\n  IDValue extends PropertyKey = E extends Entity<string, infer IdType> ? IdType : any\r\n> {\r\n  add(\r\n    options: A,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  get(\r\n    id: IDValue,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  update(\r\n    entity: PartialWithId<A, IDValue, IDKey> | IDValue,\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  delete(\r\n    entity: Partial<A> | IDValue,\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  //...\r\n  // TODO - other methods\r\n}\r\n\r\nexport type EntityDataMap<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0]\r\n> = Partial<IEntityRepoMethods<C, E, A>>;\r\n\r\n/**\r\n * A typical multi-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n * @template `ID` entity primary key type\r\n * @template `IDKey` entity primary key name\r\n */\r\nexport class EntityRepositoryClass<\r\n  DM extends EntityDataMap<C, E, A>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  IDKey extends PropertyKey = E extends Entity<infer IdKey, any> ? IdKey : PropertyKey,\r\n  IDValue extends PropertyKey = E extends Entity<string, infer IdType> ? IdType : PropertyKey\r\n> extends Repository<DM, C, E, A> implements IRepoData<IDKey>, IEntityRepoMethods<C, E, A, IDKey, IDValue> {\r\n\r\n  public readonly columns: Array<string> = [];\r\n  public readonly primaryKey: IDKey;\r\n\r\n  constructor(\r\n    name: string,\r\n    connectionName: string,\r\n    public readonly currentDriver: Driver,\r\n    entity: C,\r\n    api?: DM,\r\n  ) {\r\n    super(name, connectionName, entity, api);\r\n\r\n    this.primaryKey = entity.prototype.__idKey__;\r\n    delete entity.prototype.__idKey__;\r\n\r\n    if (entity.prototype.__col__) {\r\n      this.columns = entity.prototype.__col__;\r\n\r\n      if (!this.columns.includes(String(this.primaryKey))) {\r\n        this.columns.push(String(this.primaryKey));\r\n      }\r\n\r\n      delete entity.prototype.__col__;\r\n    } else {\r\n      // Cast to any to allow passing `this` as a second arg for classes implementing IActiveRecord to work\r\n      // and to avoid pointless casting to Saveable\r\n      this.columns = Object.keys(new (entity as any)({}, this));\r\n    }\r\n  }\r\n\r\n  private get driverOptions(): IRepoData<IDKey> {\r\n    return {\r\n      name: this.name,\r\n      columns: this.columns,\r\n      primaryKey: this.primaryKey\r\n    };\r\n  }\r\n\r\n  public async add(\r\n    options: A,\r\n    // TODO: up to debate - singular arguments always or multiple args inference?\r\n    apiOptions?: FromSecArg<DM['add']> | false // Pass false to disable the api call\r\n  ) {\r\n    try {\r\n      const result = await this.currentDriver.create<A, IRepoData<IDKey>>(this.driverOptions, options);\r\n\r\n      const instance = this.makeDataInstance(result);\r\n\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult(true, instance);\r\n\r\n      // Call api driver asynchronously\r\n      if (this.api && this.api.add && apiOptions !== false) {\r\n        this.$log(`API handler execution start: ${this.name}.add()`);\r\n\r\n        // @TODO: implement async request queue\r\n        this.api.add(options, apiOptions).then(res => {\r\n          queryResult.result = this.makeDataInstance(res);\r\n          this.$log(`API handler execution end: ${this.name}.add() => ${JSON.stringify(res, undefined, '  ')}`);\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n          this.$error(`API handler execution end: ${this.name}.add() => ${e}`);\r\n        });\r\n      } else {\r\n        this.$log('No API handler called');\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      this.$error(e);\r\n\r\n      return new QueryResult<E>(false, this.makeDataInstance(options), e);\r\n    }\r\n  }\r\n\r\n  public async get(\r\n    id: IDValue,\r\n    getApiOptions?: FromSecArg<DM['get']> | false\r\n  ) {\r\n    try {\r\n      const result = await this.currentDriver.findById<A, IRepoData<IDKey>, IDValue>(this.driverOptions, id);\r\n\r\n      if (!result) {\r\n        throw new Error(`No results found for id ${id}`);\r\n      }\r\n\r\n      const instance = this.makeDataInstance(result);\r\n\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult(true, instance);\r\n\r\n      // Call api driver asynchronously\r\n      if (this.api && this.api.get && getApiOptions !== false) {\r\n        this.$log(`API handler execution start: ${this.name}.get()`);\r\n\r\n        // @TODO: implement async request queue\r\n        this.api.get(id as any, getApiOptions).then(res => {\r\n          queryResult.result = this.makeDataInstance(res);\r\n          this.$log(`API handler execution end: ${this.name}.get() => ${JSON.stringify(res, undefined, '  ')}`);\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n          this.$error(`API handler execution end: ${this.name}.get() => ${e}`);\r\n        });\r\n      } else {\r\n        this.$log('No API handler called');\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      return new QueryResult(\r\n        false,\r\n        undefined,\r\n        e\r\n      );\r\n    }\r\n  }\r\n\r\n  public async update(\r\n    entity: PartialWithId<A, IDValue, IDKey>,\r\n    updateApiOptions?: FromSecArg<DM['update']>\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  /* Do we even need this?.. */\r\n  public async updateById(\r\n    id: IDValue,\r\n    query: (entity: A) => Partial<A>,\r\n    updateApiOptions?: FromSecArg<DM['update']>\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance(query({} as any) as any)\r\n    );\r\n  }\r\n\r\n  public async delete(\r\n    entity: Partial<A> | IDValue,\r\n    deleteApiOptions?: FromSecArg<DM['delete']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  // TODO: Find, find by, exists, etc...\r\n\r\n  public async count() {\r\n    // TODO: count entities\r\n  }\r\n\r\n  // TODO: Cluster operations\r\n}\r\n\r\nexport function EntityRepository<\r\n  D extends EntityDataMap<C, E, A>,\r\n  C extends IStorableConstructor<any>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  IDKey extends PropertyKey = E extends Entity<infer IdKey, any> ? IdKey : PropertyKey,\r\n  IDValue extends PropertyKey = E extends Entity<string, infer IdType> ? IdType : PropertyKey\r\n>(options: IRepoFactoryOptions<C, D> & {\r\n  dirvers?: IDriverConstructor | IDriverConstructor[];\r\n}): RepoFactory<EntityRepositoryClass<D, C, E, A, IDKey, IDValue>> {\r\n  return (name: string, connection: Connection) => new EntityRepositoryClass<D, C, E, A, IDKey, IDValue>(\r\n    name,\r\n    connection.name,\r\n    new (selectDriver(options.dirvers || FallbackDriver, name))(connection),\r\n    options.model,\r\n    options.api\r\n  );\r\n}\r\n","import { Driver, FallbackDriver, IDriverConstructor } from '../drivers';\r\nimport { Connection } from '../connection/connection';\r\nimport { QueryResult } from '../queryResult';\r\nimport { IStorableConstructor, Record } from '../storable';\r\nimport { FromSecArg, IRepoData, RepoFactory, IRepoFactoryOptions, Repository, selectDriver } from './base';\r\n\r\nexport interface IRecordRepoMethods<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0]\r\n> {\r\n  create(\r\n    options: A,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  read(\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  update(\r\n    options: Partial<A>,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  delete(\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  //...\r\n  // TODO - other methods?\r\n}\r\n\r\nexport type RecordDataMap<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0]\r\n> = Partial<IRecordRepoMethods<C, E, A>>;\r\n\r\n/**\r\n * A single-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n */\r\nexport class RecordRepositoryClass<\r\n  DM extends RecordDataMap<C, E, A>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Repository<DM, C, E, A> implements IRepoData<never>, IRecordRepoMethods<C, E ,A> {\r\n  constructor(\r\n    name: string,\r\n    connectionName: string,\r\n    public readonly currentDriver: Driver,\r\n    record: C,\r\n    api?: DM,\r\n  ) {\r\n    super(name, connectionName, record, api);\r\n  }\r\n\r\n  public async create(\r\n    options: A,\r\n    apiOptions?: FromSecArg<DM['create']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async update(\r\n    options: Partial<A>,\r\n    apiOptions?: FromSecArg<DM['update']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async read(apiOptions?: FromSecArg<DM['read']> | false) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async delete(apiOptions?: FromSecArg<DM['delete']> | false) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport function RecordRepository<\r\n  D extends RecordDataMap<C>,\r\n  C extends IStorableConstructor<any>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n>(options: IRepoFactoryOptions<C, D> & {\r\n  dirvers?: IDriverConstructor | IDriverConstructor[];\r\n}): RepoFactory<RecordRepositoryClass<D, C, E, A>> {\r\n  return (name: string, connection: Connection) => new RecordRepositoryClass<D, C, E, A>(\r\n    name,\r\n    connection.name,\r\n    new (selectDriver(options.dirvers || FallbackDriver, name))(connection),\r\n    options.model,\r\n    options.api\r\n  );\r\n}\r\n","import { Connection } from '../connection/connection';\r\nimport { IStorableConstructor } from '../storable';\r\nimport { DataMap, RepoFactory, IRepoFactoryOptions, Repository } from './base';\r\n\r\nexport class RemoteRepositoryClass<\r\n  DM extends DataMap<C>,\r\n  C extends IStorableConstructor<any>\r\n> extends Repository<DM, C> {\r\n  public get API() {\r\n    return this.api!;\r\n  }\r\n}\r\n\r\nexport function RemoteRepository<\r\n  C extends IStorableConstructor<any>,\r\n  D extends DataMap<C>\r\n>(options: IRepoFactoryOptions<C, D>): RepoFactory<RemoteRepositoryClass<D, C>> {\r\n  return (name: string, connection: Connection) => new RemoteRepositoryClass<D, C>(\r\n    name,\r\n    connection.name,\r\n    options.model,\r\n    options.api\r\n  );\r\n}\r\n","import { enumerable } from '../decorators';\r\n\r\nexport type IStorableConstructor<E extends Storable> = new (options) => E;\r\n\r\nexport abstract class Storable {\r\n  @enumerable(false)\r\n  private static __col__: Array<PropertyKey> = [];\r\n\r\n  @enumerable(false)\r\n  protected __options;\r\n\r\n  constructor(__options) {\r\n    this.__options = __options;\r\n  }\r\n\r\n  public static Property(target: Storable, key: PropertyKey) {\r\n    const constructor = (target.constructor as typeof Storable);\r\n\r\n    if (!constructor.__col__) {\r\n      constructor.__col__ = [];\r\n    }\r\n\r\n    constructor.__col__.push(key);\r\n  }\r\n}\r\n\r\nexport interface IActiveRecord {\r\n  $save(): Promise<this | undefined>;\r\n  $delete(): Promise<this | undefined>;\r\n}\r\n","import { DebugInstance, DebugType } from '../debug';\r\nimport { enumerable } from '../decorators';\r\nimport { EntityRepositoryClass } from '../repository/entity';\r\nimport { IActiveRecord, Storable } from './base';\r\n\r\nconst defaultIdAliases = [\r\n  'id', 'ID', 'Id', '_id', '_ID', '_Id', '__id', '__ID', '__Id', '__id__', '__ID__', '__Id__'\r\n];\r\n\r\ntype WithId<T, IDKey extends PropertyKey, IDValue> = T & {\r\n  [key in IDKey]: IDValue;\r\n};\r\n\r\nexport class Entity<\r\n  IDKey extends PropertyKey = any,\r\n  IDValue extends PropertyKey = any\r\n> extends Storable {\r\n  @enumerable(false)\r\n  protected __idKey__?: IDKey;\r\n\r\n  @enumerable(false)\r\n  protected __idValue__?: IDValue;\r\n\r\n  constructor(options: WithId<{ [key: string]: any }, IDKey, IDValue>) {\r\n    super(options);\r\n\r\n    // If no unique ID is set for the entity\r\n    if (!this.__idKey__) {\r\n      const key = Object.keys(this).find(key => defaultIdAliases.some(a => a === key));\r\n\r\n      // Auto-apply the ID decorator if found any compatible property\r\n      if (key) {\r\n        (this.constructor as typeof Entity).ID(this, key);\r\n      }\r\n    }\r\n\r\n    if (this.__idKey__ && options[String(this.__idKey__)]) {\r\n      Reflect.deleteProperty(this, '__idValue__');\r\n      Reflect.defineProperty(this, '__idValue__', {\r\n        value: options[String(this.__idKey__)],\r\n        writable: true,\r\n        enumerable: false\r\n      });\r\n\r\n      Reflect.deleteProperty(this, this.__idKey__);\r\n      Reflect.defineProperty(this, this.__idKey__, {\r\n        get: () => this.__idValue__,\r\n        set: v => this.__idValue__ = v,\r\n        enumerable: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public static ID(target: Entity, key: PropertyKey) {\r\n    target.__idKey__ = key;\r\n\r\n    (target.constructor as typeof Entity).Property(target, key);\r\n  }\r\n}\r\n\r\n/**\r\n * Enables ActiveRecord pattern for the entity\r\n */\r\nexport class SaveableEntity<\r\n  IDKey extends PropertyKey = string,\r\n  IDValue extends PropertyKey = any\r\n> extends Entity<IDKey, IDValue> implements IActiveRecord {\r\n  @enumerable(false)\r\n  private readonly __debug: DebugInstance;\r\n  @enumerable(false)\r\n  private readonly __repo?: EntityRepositoryClass<any, any, this, any, IDKey, IDValue>;\r\n\r\n  @enumerable(false)\r\n  private __contextWarning(optional: string = '') {\r\n    this.__debug.$warn(`Seems like the entity \"${\r\n      this.constructor.name\r\n    }\" was initialized in a wrong context.\\n${optional}`, true);\r\n  }\r\n\r\n  constructor(options: WithId<{ [key: string]: any }, IDKey, IDValue>, repo?: EntityRepositoryClass<any, any, any, any, IDKey, IDValue>) {\r\n    super(options);\r\n\r\n    if (repo) {\r\n      this.__repo = repo;\r\n\r\n      this.__debug = new DebugInstance(\r\n        `db:${repo.name}:entity` as DebugType,\r\n        this.__repo.$connectionName\r\n        );\r\n    } else {\r\n      this.__debug = new DebugInstance('*', '');\r\n      this.__contextWarning();\r\n    }\r\n  }\r\n\r\n  public $save() {\r\n    if (!this.__repo) {\r\n      this.__contextWarning('Saving cannot be done.');\r\n\r\n      return Promise.resolve(undefined);\r\n    }\r\n\r\n    const idkey = this.__idKey__;\r\n\r\n    return this.__repo.updateById(\r\n      idkey ? this[idkey as PropertyKey] : 0,\r\n      () => this\r\n    ).then(r => r.result).catch(e => { throw e; });\r\n  }\r\n\r\n  public $delete(): Promise<this | undefined> {\r\n    if (!this.__repo) {\r\n      this.__contextWarning('Deletion cannot be done.');\r\n\r\n      return Promise.resolve(undefined);\r\n    }\r\n\r\n    const idkey = this.__idKey__;\r\n\r\n    return this.__repo.delete(\r\n      idkey ? this[idkey as PropertyKey] : 0\r\n    ).then(r => r.result).catch(e => { throw e; });\r\n  }\r\n}\r\n","import { DebugInstance, DebugType } from '../debug';\r\nimport { enumerable } from '../decorators';\r\nimport { RecordRepositoryClass } from '../repository/record';\r\nimport { IActiveRecord, Storable } from './base';\r\n\r\nexport class Record extends Storable {\r\n  constructor(options) { super(options); }\r\n}\r\n\r\nexport class SaveableRecord extends Record implements IActiveRecord {\r\n  @enumerable(false)\r\n  private readonly __debug: DebugInstance;\r\n  @enumerable(false)\r\n  private readonly __repo?: RecordRepositoryClass<any, any, this, any>;\r\n\r\n  @enumerable(false)\r\n  private __contextWarning(optional: string = '') {\r\n    this.__debug.$warn(`Seems like the record \"${\r\n      this.constructor.name\r\n    }\" was initialized in a wrong context.\\n${optional}`, true);\r\n  }\r\n\r\n  constructor(options, repo?: RecordRepositoryClass<any, any, any, any>) {\r\n    super(options);\r\n\r\n    if (repo) {\r\n      this.__repo = repo;\r\n\r\n      this.__debug = new DebugInstance(\r\n        `db:${repo.name}:entity` as DebugType,\r\n        this.__repo.$connectionName\r\n        );\r\n    } else {\r\n      this.__debug = new DebugInstance('*', '');\r\n      this.__contextWarning();\r\n    }\r\n  }\r\n\r\n  public $save() {\r\n    if (!this.__repo) {\r\n      this.__contextWarning('Saving cannot be done.');\r\n\r\n      return Promise.resolve(undefined);\r\n    }\r\n\r\n    return this.__repo.update(this)\r\n      .then(r => r.result)\r\n      .catch(e => { throw e; });\r\n  }\r\n\r\n  public $delete(): Promise<this | undefined> {\r\n    if (!this.__repo) {\r\n      this.__contextWarning('Deletion cannot be done.');\r\n\r\n      return Promise.resolve(undefined);\r\n    }\r\n\r\n    return this.__repo.delete()\r\n      .then(r => r.result)\r\n      .catch(e => { throw e; });\r\n  }\r\n}\r\n"],"names":["tslib_1.__decorate","Connection","connection"],"mappings":"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"}