{"version":3,"file":"webrm.es.js","sources":["../src/debug.ts","../src/drivers/base.ts","../src/drivers/fallback.ts","../src/repository/base.ts","../src/queryResult.ts","../src/repository/entityRepository.ts","../src/util.ts","../src/storable/entity.ts","../src/storable/record.ts","../src/repository/recordRepository.ts","../src/repository/factory.ts","../src/drivers/api.ts","../src/orm/connection.ts","../src/orm/index.ts"],"sourcesContent":["const LOG_PREFIX = (name: string) => name ? `[WebRM:${name}]` : `[WebRM]`;\r\n\r\n/**\r\n * A type of debug errors\r\n *\r\n * - `soft` - informative, only logs to console\r\n * - `hard` - throws exceptions, forcing proper error-handling\r\n */\r\nexport type ExceptionType = 'soft' | 'hard';\r\n\r\n/**\r\n * Dictates the type of debug to set\r\n *\r\n * - `*` - debug everything\r\n * - `connection` - debug the orm connection\r\n * - `driver` - debug all drivers\r\n * - `driver:[name]` - debug a driver with [name]\r\n * - `db` - debug all repositories\r\n * - `db:[name]` - debug a repo with [name]\r\n * - `db:[name]:entity` - debug all entities in the repository\r\n * - `db:[name]:entity:[name]` - debug entity [name]\r\n */\r\nexport type DebugType = '*'\r\n  | 'connection'\r\n  | 'driver'\r\n  | 'driver:[name]'\r\n  | 'db'\r\n  | 'db:[name]'\r\n  | 'db:[name]:entity'\r\n  | 'db:[name]:entity:[name]';\r\n\r\n/**\r\n * Maps all debug types to all errors types, telling which debug type will throw\r\n */\r\nexport type IDebugMap = Partial<{\r\n  [key: string]: boolean | ExceptionType;\r\n}>;\r\n\r\nexport type LogLevel = 'log' | 'debug' | 'warn' | 'error';\r\n\r\nexport abstract class Debug {\r\n  private constructor() {}\r\n\r\n  protected static debugState: 'enabled' | 'disabled' | 'custom' = 'disabled';\r\n\r\n  /**\r\n   * Contains the map for all debug types and their respective error types for the ORM.\r\n   */\r\n  public static readonly map: IDebugMap = {};\r\n\r\n\r\n  /**\r\n   * `true` if any debug is enabled\r\n   */\r\n  public static get isEnabled() { return this.debugState !== 'disabled'; }\r\n\r\n  /**\r\n   * Shows the current debug state of WebRM\r\n   *\r\n   * - `enabled` - all the logs and exceptions are enabled\r\n   * - `custom` - custom rules are set via a `debug()` function\r\n   * - `disabled` - all the logs and most exceptions are suppressed\r\n   */\r\n  public static get state() { return this.debugState; }\r\n  public static set state(v) { this.debugState = v; }\r\n\r\n\r\n  public static error(instanceName: string, type: string, message: string);\r\n  public static error(instanceName: string, type: RegExp, message: string);\r\n  public static error(instanceName: string, type: DebugType, message: string);\r\n  public static error(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'error');\r\n  }\r\n\r\n  public static log(instanceName: string, type: string, message: string);\r\n  public static log(instanceName: string, type: RegExp, message: string);\r\n  public static log(instanceName: string, type: DebugType, message: string);\r\n  public static log(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'log');\r\n  }\r\n\r\n  public static warn(instanceName: string, type: string, message: string);\r\n  public static warn(instanceName: string, type: RegExp, message: string);\r\n  public static warn(instanceName: string, type: DebugType, message: string);\r\n  public static warn(instanceName: string, type: any, message: string) {\r\n    return this.print(instanceName, type, message, 'warn');\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the current error type for a specific type of debugging\r\n   */\r\n  public static errorType(type: string): boolean | ExceptionType;\r\n  public static errorType(type: RegExp): boolean | ExceptionType;\r\n  public static errorType(type: DebugType): boolean | ExceptionType;\r\n  public static errorType(type: string | RegExp | DebugType): boolean | ExceptionType {\r\n    if (this.map['*']) { return this.map['*']!; }\r\n\r\n    const isString = (t): t is string => typeof t === 'string';\r\n\r\n    if (isString(type) && this.map[type]) {\r\n      return this.map[type]!;\r\n    }\r\n\r\n    if (isString(type)) {\r\n      const matchingType = Object.keys(this.map)\r\n        .find(t => !!t && t.includes(type) && !!this.map[t]) as ExceptionType | undefined;\r\n\r\n      return matchingType || false;\r\n    }\r\n\r\n    return (Object.keys(this.map).find(t => type.test(t)) as ExceptionType | undefined) || false;\r\n  }\r\n\r\n\r\n  public static print(instanceName: string, type: any, message: string, level: LogLevel) {\r\n    if (this.debugState !== 'disabled') {\r\n      const typeOfError = this.errorType(type);\r\n      if (typeOfError) {\r\n        if (typeOfError === 'hard' && level === 'error') {\r\n          throw new Error(`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n        } else {\r\n          console[level](`%c${LOG_PREFIX(instanceName)}%c:%c${type}%c - ${message}`,\r\n            'color: purple',\r\n            'color: initial',\r\n            'color: blue',\r\n            'color: initial'\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static decoratedLogs: any = {};\r\n\r\n  public static prints(message: string, level: LogLevel = 'log', type: DebugType = '*') {\r\n    return (target, key: string, desc: PropertyDescriptor) => {\r\n      Object.defineProperty(this.decoratedLogs, key, desc || {\r\n        value: undefined,\r\n        writable: true,\r\n        enumerable: true\r\n      });\r\n      Object.defineProperty(target, key, {\r\n        get: () => {\r\n          this.print('', type, message, level);\r\n\r\n          return this.decoratedLogs[key];\r\n        },\r\n        set: v => {\r\n          this.decoratedLogs[key] = v;\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n}\r\n","import { Connection } from '../orm';\r\n\r\nexport interface IDriverConstructor extends Function {\r\n  new (connection: Connection): Driver;\r\n\r\n  readonly isSupported: boolean;\r\n}\r\n\r\nexport abstract class Driver {\r\n  constructor(\r\n    protected connection: Connection\r\n  ) {}\r\n\r\n  public abstract create<T extends object>(repositoryName: string, data: T): Promise<T>;\r\n  public abstract read<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, id: any, query: (data: T) => Partial<T>): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, data: Partial<T>): Promise<T>;\r\n  public abstract delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n\r\n  /**\r\n   * Determines if the driver is supported in current environment\r\n   */\r\n  static get isSupported(): boolean {\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n","import { Driver } from './base';\r\n\r\nexport class FallbackDriver extends Driver {\r\n  public create<T extends object>(repositoryName: string, entity: T): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public read<T extends object>(repositoryName: string, id: any): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public update<T extends object>(repositoryName: string, id: any, data: Partial<T>): Promise<T>;\r\n  public update<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n  public async update(repositoryName: any, id: any, data?: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n  public delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public async delete(repositoryName: any, entity: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n","import { Debug } from '../debug';\r\nimport { IStorable, IStorableConstructor } from '../storable';\r\nimport { Driver } from '../drivers';\r\nimport { ApiDriver } from '../drivers/api';\r\nimport { DataMap } from '../apiMap';\r\n\r\n/**\r\n * @TODO:\r\n * - Async API MAP crap for handling QueryResults\r\n */\r\n\r\nexport class Repository<\r\n  DM extends DataMap<any>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> {\r\n  constructor(\r\n    public name: string,\r\n    protected readonly connection: {\r\n      name: string;\r\n      currentDriver: Driver;\r\n      apiDriver?: ApiDriver;\r\n    },\r\n    protected Data: C\r\n  ) {\r\n    if (\r\n      // If this class was instantiated directly (without inheritance)\r\n      Repository.prototype === this.constructor.prototype\r\n\r\n      // And debug for db:[name] is set\r\n      && Debug.map[`db:${name}`]\r\n    ) {\r\n      Debug.warn(connection.name, `db:${name}`, `Using default empty repository for ${name}`);\r\n    }\r\n  }\r\n}\r\n","type PromiseExecutor<T> = (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void;\r\n\r\n/**\r\n * Incapsulates the query result data for further manipulation\r\n *\r\n * @template T the type of data encapsulated\r\n */\r\nexport class QueryResult<T> {\r\n  private _ok: boolean;\r\n  private _result: T;\r\n  private _error?: Error;\r\n  private handlers: ((error?: Error, result?: T) => any)[] = [];\r\n\r\n  constructor(ok: boolean, result: T, error?: Error) {\r\n    this._ok = ok;\r\n    this._result = result;\r\n    this._error = error;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the incapsulated data is OK and contains no errors\r\n   */\r\n  public get ok() { return this._ok; }\r\n\r\n  /**\r\n   * The resulting data of the query request\r\n   */\r\n  public get result() { return this._result; }\r\n  public set result(value) {\r\n    this._ok = true;\r\n    this._result = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * The error of the query (if any)\r\n   */\r\n  public get error() { return this._error; }\r\n  public set error(value) {\r\n    this._ok = false;\r\n    this._error = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * Fires a handler whenever the data in the result has been changed\r\n   *\r\n   * @param callback the callback to fire\r\n   */\r\n  public onChange(callback: (error?: Error, result?: T) => any) {\r\n    this.handlers.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the callback from the result data changes\r\n   */\r\n  public offChange(callback: (error?: Error, result?: T) => any) {\r\n    const idx = this.handlers.indexOf(callback);\r\n\r\n    if (idx > -1) {\r\n      this.handlers.splice(idx, 1);\r\n    }\r\n  }\r\n}\r\n","import { Connection } from '../orm/connection';\r\nimport { QueryResult } from '../queryResult';\r\nimport { Entity, IStorable, IStorableConstructor } from '../storable';\r\nimport { Key } from '../util';\r\nimport { Repository } from './base';\r\nimport { Driver } from '../drivers';\r\nimport { ApiDriver } from '../drivers/api';\r\nimport { DataMap } from '../apiMap';\r\n\r\ntype PartialWithId<T, ID, IDKey extends Key> = Partial<T> & {\r\n  [key in IDKey]: ID;\r\n};\r\n\r\ntype Arg<T extends undefined | ((arg: any) => any)> = T extends (arg: infer U) => any ? U : undefined;\r\n\r\nexport class EntityRepository<\r\n  // TODO: hide most of the generic params from end-user..?\r\n  DM extends DataMap<any>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  ID = E extends Entity<string, infer IdType> ? IdType : any,\r\n  IDKey extends string = E extends Entity<infer IdKey, unknown> ? IdKey : string,\r\n> extends Repository<DM, C, E, A> {\r\n  public readonly columns: Array<string>;\r\n  public readonly primaryKey: string | number;\r\n\r\n  constructor(\r\n    name: string,\r\n    connection: {\r\n      name: string;\r\n      currentDriver: Driver;\r\n      apiDriver?: ApiDriver;\r\n    },\r\n    entity: C\r\n  ) {\r\n    super(name, connection, entity);\r\n    this.primaryKey = entity.prototype.__id__;\r\n    this.columns = Object.keys(entity.prototype.__col__);\r\n    delete entity.prototype.__col__;\r\n  }\r\n\r\n  public test?: DM;\r\n\r\n  public async add(\r\n    options: A,\r\n    // TODO: up to debate - singular arguments always or multiple args inference?\r\n    apiOptions?: Arg<DM['create']>\r\n  ) {\r\n    const instance = new this.Data(options);\r\n\r\n    try {\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult<E>(true, await this.connection.currentDriver.create(this.name, instance));\r\n\r\n      // Call api driver asynchronously\r\n      if (apiOptions && this.connection.apiDriver) {\r\n        this.connection.apiDriver.create(this.name, apiOptions).then(res => {\r\n          queryResult.result = res;\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n        });\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      // TODO: logs\r\n      return new QueryResult<E>(false, instance, e);\r\n    }\r\n  }\r\n\r\n  public get(id: ID): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data({})\r\n    );\r\n  }\r\n\r\n  public update(entity: PartialWithId<A, ID, IDKey>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data({})\r\n    );\r\n  }\r\n\r\n  public updateById(id: ID, query: (entity: E) => Partial<A>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data(query({} as any))\r\n    );\r\n  }\r\n\r\n  public delete(entity: PartialWithId<A, ID, IDKey> | ID): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data({})\r\n    );\r\n  }\r\n\r\n  // TODO: Find, find by, etc...\r\n\r\n  public count() {\r\n    // TODO: count entities\r\n  }\r\n}\r\n","/**\r\n * fromPath\r\n * Returns a value from an object by a given path (usually string).\r\n *\r\n * https://gist.github.com/Raiondesu/759425dede5b7ff38db51ea5a1fb8f11\r\n *\r\n * @param obj an object to get a value from.\r\n * @param path to get a value by.\r\n * @param splitter to split the path by. Default is '.' ('obj.path.example')\r\n * @returns a value from a given path. If a path is invalid - returns undefined.\r\n */\r\nexport function fromPath(obj, path, splitter = '.') {\r\n  if (!path)\r\n    return obj;\r\n\r\n  if (typeof path === 'number' || !~path.indexOf(splitter))\r\n    return obj[path];\r\n\r\n  return path.split(splitter).reduce((o, i) => (o === Object(o) ? o[i] : o), obj);\r\n}\r\n\r\nexport function NonEnumerable(target: object, key: string, desc: PropertyDescriptor = {}) {\r\n  Object.defineProperty(target, key, {\r\n    ...desc,\r\n\r\n    // TODO: check to be writable\r\n    enumerable: false\r\n  });\r\n}\r\n\r\nexport type Key = string | number | symbol;\r\n","import { Key, NonEnumerable } from '../util';\r\nimport { IStorable } from './istorable';\r\n\r\nexport class Entity<\r\n  IDKey extends Key = string,\r\n  ID = any\r\n> implements IStorable {\r\n  // TODO: check to be writable\r\n  @NonEnumerable\r\n  private __col__: Array<string> = [];\r\n\r\n  @NonEnumerable\r\n  private __idCol__?: IDKey;\r\n\r\n  @NonEnumerable\r\n  private __idValue__?: ID;\r\n\r\n  constructor(options) {\r\n    if (this.__idCol__) {\r\n      this.__idValue__ = options[this.__idCol__];\r\n    }\r\n  }\r\n\r\n  public $save() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public $delete() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public static Column(target: typeof Entity['prototype'], key: string) {\r\n    target.__col__.push(key);\r\n  }\r\n\r\n  public static ID(target: typeof Entity['prototype'], key: string) {\r\n    target.__idCol__ = key;\r\n  }\r\n}\r\n\r\nexport const Column = Entity.Column;\r\nexport const ID = Entity.ID;\r\n","import { IStorable } from './istorable';\r\n\r\nexport class Record implements IStorable {\r\n  public $save(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public $delete(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n","import { QueryResult } from '../queryResult';\r\nimport { IStorable, IStorableConstructor } from '../storable';\r\nimport { Repository } from './base';\r\nimport { Connection } from '../orm';\r\nimport { DataMap } from '../apiMap';\r\n\r\nexport class RecordRepository<\r\n  DM extends DataMap<any>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Repository<DM, C, E, A> {\r\n  public create(options: A): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data(options)\r\n    );\r\n  }\r\n\r\n  public update(options: Partial<A>): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data(options)\r\n    );\r\n  }\r\n\r\n  public read(): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data({})\r\n    );\r\n  }\r\n\r\n  public delete(): QueryResult<E> {\r\n    return new QueryResult(\r\n      true,\r\n      new this.Data({})\r\n    );\r\n  }\r\n}\r\n","import { Debug } from '../debug';\r\nimport { Driver } from '../drivers';\r\nimport { ApiDriver } from '../drivers/api';\r\nimport { Entity, IStorable, IStorableConstructor, Record } from '../storable';\r\nimport { Repository } from './base';\r\nimport { EntityRepository } from './entityRepository';\r\nimport { RecordRepository } from './recordRepository';\r\nimport { DataMap } from '../apiMap';\r\n\r\nexport function makeRepository<\r\n  DM extends DataMap<any>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends IStorable = InstanceType<C>,\r\n>(\r\n  name: string,\r\n  connection: {\r\n    name: string;\r\n    currentDriver: Driver;\r\n    apiDriver?: ApiDriver;\r\n  },\r\n  data: C\r\n): E extends Entity ? EntityRepository<DM, C, E> : E extends Record ? RecordRepository<DM, C, E> : Repository<DM, C, E> {\r\n  let Constructor: any;\r\n\r\n  if (data.prototype instanceof Entity) {\r\n    Constructor = EntityRepository;\r\n  } else if (data.prototype instanceof Record) {\r\n    Constructor = RecordRepository;\r\n  } else {\r\n    Debug.error(connection.name, 'db', `No suitable repository found for ${data.name} when trying to connect with ${name}.`);\r\n\r\n    Constructor = Repository;\r\n  }\r\n\r\n  return new Constructor(name, connection, data);\r\n}\r\n","import { Driver } from './base';\r\nimport { Connection } from '../orm/connection';\r\nimport { ApiMap } from '../apiMap';\r\n\r\n/* TODO */\r\nexport class ApiDriver extends Driver {\r\n  constructor(\r\n    connection: Connection<any, any>,\r\n    protected apiMap: ApiMap<any>\r\n  ) { super(connection); }\r\n\r\n  public create(repositoryName: string, data: any): Promise<any> {\r\n    const repo = this.apiMap[repositoryName];\r\n\r\n    if (repo && repo.create) {\r\n      return repo.create(data);\r\n    } else {\r\n      return Promise.reject(/* TODO: error handling */);\r\n    }\r\n  }\r\n\r\n  public read(repositoryName: string, id: any): Promise<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public update(repositoryName: string, id: any, query: (data: any) => Partial<any>): Promise<any>;\r\n  public update(repositoryName: string, data: Partial<any>): Promise<any>;\r\n  public update(repositoryName: any, id: any, query?: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return Promise.resolve();\r\n  }\r\n  public delete(repositoryName: string, id: any): Promise<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n\r\n}\r\n","import { Debug, DebugType, ExceptionType } from '../debug';\r\nimport { Driver, IDriverConstructor } from '../drivers';\r\nimport { FallbackDriver } from '../drivers/fallback';\r\nimport { EntityRepository, makeRepository, Repository } from '../repository';\r\nimport { RecordRepository } from '../repository/recordRepository';\r\nimport { Entity, IStorableConstructor, Record } from '../storable';\r\nimport { ApiMap, DataMap } from '../apiMap';\r\nimport { ApiDriver } from '../drivers/api';\r\n\r\nexport interface IRepositoryMap {\r\n  [name: string]: IStorableConstructor<any>;\r\n}\r\n\r\nexport type RepoFromConstructor<\r\n  S extends IStorableConstructor<any>,\r\n  D extends DataMap<any> = any\r\n> = InstanceType<S> extends Entity ? EntityRepository<D, S>\r\n  : (InstanceType<S> extends Record ? RecordRepository<D, S> : Repository<D, S>);\r\n\r\nexport type RepoStore<M extends IRepositoryMap, A extends ApiMap<any>> = {\r\n  [name in (keyof M | keyof A)]: RepoFromConstructor<name extends keyof M ? M[name] : any, name extends keyof A ? (A[name] extends DataMap<any> ? A[name] : any) : any>;\r\n};\r\n\r\nexport class Connection<\r\n  RM extends IRepositoryMap = IRepositoryMap,\r\n  AM extends ApiMap<any> = ApiMap<RM>,\r\n> {\r\n  // TODO\r\n  // public static readonly plugins: WebRM.IPlugin[] = [];\r\n\r\n  /**\r\n   * The driver currently used for operations with entities\r\n   */\r\n  public currentDriver: Driver;\r\n\r\n  /**\r\n   * The driver currently used for operations with api requests\r\n   */\r\n  public apiDriver?: ApiDriver;\r\n\r\n  /**\r\n   * A current map of bound repositories\r\n   */\r\n  public repositories: RepoStore<RM, AM> = {} as any;\r\n\r\n  /**\r\n   * Creates a WebRM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public drivers: IDriverConstructor[],\r\n    repositories: RM,\r\n    public readonly apiMap?: AM\r\n  ) {\r\n    if (apiMap) {\r\n      this.apiDriver = new ApiDriver(this, apiMap);\r\n    } else {\r\n      Debug.log(this.name, '*', 'The main webrm functionality is disabled. Are you sure you want to use this without API?');\r\n    }\r\n\r\n    // Select the first supported driver from the bunch\r\n    const SupportedDriver = drivers.find(d => d.isSupported);\r\n\r\n    if (SupportedDriver) {\r\n      // TODO: multi-driver mode\r\n      Debug.log(\r\n        this.name,\r\n        'orm',\r\n        `Using driver \"${SupportedDriver.name}\" as the first supported driver`\r\n      );\r\n\r\n      this.currentDriver = new SupportedDriver(this);\r\n    } else {\r\n      Debug.warn(\r\n        this.name,\r\n        'orm',\r\n        'No supported driver provided. Using fallback.'\r\n      );\r\n\r\n      this.currentDriver = new FallbackDriver(this);\r\n    }\r\n\r\n    let reProxy;\r\n\r\n    if (!Proxy) {\r\n      Debug.warn(\r\n        this.name,\r\n        'orm',\r\n        `window.Proxy is unavailable. Using insufficient property forwarding.`\r\n      );\r\n\r\n      reProxy = (repoName: string) => Object.defineProperty(this, repoName, {\r\n        get: () => this.repositories[repoName],\r\n      });\r\n    }\r\n\r\n    for (const repoName in repositories) {\r\n      const entityConstructor = repositories[repoName];\r\n\r\n      this.repositories[repoName] = makeRepository(repoName, {\r\n        name: this.name,\r\n        apiDriver: this.apiDriver,\r\n        currentDriver: this.currentDriver\r\n      }, entityConstructor) as any;\r\n\r\n      reProxy && reProxy(repoName);\r\n    }\r\n\r\n    if (Proxy) {\r\n      Debug.log(\r\n        this.name,\r\n        'orm',\r\n        `window.Proxy is available. Using modern property forwarding.`\r\n      );\r\n\r\n      return new Proxy(this, {\r\n        get(target, key: string) {\r\n          if (!target.repositories[key]) {\r\n            if (!target[key]) {\r\n              Debug.log(\r\n                target.name,\r\n                'orm',\r\n                `Repository \"${key}\" is not registered upon initialization. No other property with the same name was found.`\r\n              );\r\n            }\r\n\r\n            return target[key];\r\n          }\r\n\r\n          return target.repositories[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region Debug\r\n\r\n  /**\r\n   * Enable a certain debug option for WebRM\r\n   *\r\n   * Allows for detailed debug type - exception type mapping.\r\n   */\r\n  public static debug(enabled: boolean): void;\r\n  public static debug(type: DebugType): void;\r\n  public static debug(type: DebugType, exceptions: ExceptionType): void;\r\n  public static debug(type: string): void;\r\n  public static debug(type: string, exceptions: ExceptionType): void;\r\n  public static debug(type: boolean | string, exceptions?: ExceptionType) {\r\n    if (typeof type === 'boolean') {\r\n      Debug.state = (type ? 'enabled' : 'disabled');\r\n    } else {\r\n      Debug.state = ('custom');\r\n\r\n      Debug.map[type] = exceptions || !Debug.map[type];\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { IDriverConstructor } from '../drivers';\r\nimport { ApiMap, DataMap } from '../apiMap';\r\nimport { Connection as connection, IRepositoryMap, RepoStore } from './connection';\r\n\r\nexport const Connection = connection as {\r\n  /**\r\n   * Creates a WebRM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure.\r\n   */\r\n  new <\r\n    RM extends IRepositoryMap = IRepositoryMap,\r\n    AM extends ApiMap<any> = ApiMap<RM>\r\n  >(\r\n      name: string,\r\n      drivers: IDriverConstructor[],\r\n      repositories: RM,\r\n      apiMap?: AM\r\n  ): connection<RM, AM> & RepoStore<RM, AM>;\r\n} & typeof connection;\r\n\r\nexport type Connection<\r\nRM extends IRepositoryMap = any,\r\nAM extends ApiMap<any> = any\r\n> = connection<RM, AM>;\r\n\r\nexport * from './namespace';\r\n\r\n"],"names":["tslib_1.__decorate","Connection","connection"],"mappings":"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"}