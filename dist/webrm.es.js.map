{"version":3,"file":"webrm.es.js","sources":["../src/util.ts","../src/debug/module.ts","../src/debug/debugable.ts","../src/debug/index.ts","../src/drivers/base.ts","../src/drivers/api/index.ts","../src/drivers/fallback.ts","../src/repository/base.ts","../src/queryResult.ts","../src/repository/entityRepository.ts","../src/storable/storable.ts","../src/storable/entity.ts","../src/storable/record.ts","../src/repository/recordRepository.ts","../src/repository/factory.ts","../src/orm/connection.ts","../src/orm/index.ts"],"sourcesContent":["/**\r\n * fromPath\r\n * Returns a value from an object by a given path (usually string).\r\n *\r\n * @see [gist](https://gist.github.com/Raiondesu/759425dede5b7ff38db51ea5a1fb8f11)\r\n *\r\n * @param obj an object to get a value from.\r\n * @param path to get a value by.\r\n * @param splitter to split the path by. Default is '.' ('obj.path.example')\r\n * @returns a value from a given path. If a path is invalid - returns undefined.\r\n */\r\nexport function fromPath(obj, path, splitter = '.') {\r\n  if (!path)\r\n    return obj;\r\n\r\n  if (typeof path === 'number' || !~path.indexOf(splitter))\r\n    return obj[path];\r\n\r\n  return path.split(splitter).reduce((o, i) => (o === Object(o) ? o[i] : o), obj);\r\n}\r\n\r\nexport const Enumerable = (enumerable: boolean = true) => function (target: object, key: string, desc: PropertyDescriptor = {}) {\r\n  desc.enumerable = enumerable;\r\n};\r\n\r\nexport type Key = string | number | symbol;\r\n","const LOG_PREFIX = (name: string) => name ? `[WebRM:${name}]` : `[WebRM]`;\r\n\r\n/**\r\n * A type of debug errors\r\n *\r\n * - `soft` - informative, only logs to console\r\n * - `hard` - throws exceptions, forcing proper error-handling\r\n */\r\nexport type ExceptionType = 'soft' | 'hard';\r\n\r\n/**\r\n * Dictates the type of debug to set\r\n *\r\n * - `*` - debug everything\r\n * - `connection` - debug the orm connection\r\n * - `driver` - debug all drivers\r\n * - `driver:${name}` - debug a driver with ${name}\r\n * - `db` - debug all repositories\r\n * - `db:${name}` - debug a repo with ${name}\r\n * - `db:${name}:entity` - debug all entities in the repository\r\n */\r\nexport type DebugType = '*'\r\n  | 'connection'\r\n  | 'driver'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'driver:${name}'\r\n  | 'db'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}:entity';\r\n\r\nexport type DebugState = 'enabled' | 'disabled' | 'custom';\r\n\r\n/**\r\n * Maps all debug types to all errors types, telling which debug type will throw\r\n */\r\nexport type DebugMap = Partial<{\r\n  [key: string]: boolean | ExceptionType;\r\n}>;\r\n\r\nexport type LogLevel = 'log' | 'debug' | 'warn' | 'error';\r\n\r\n\r\n/**\r\n * Shows the current debug state of WebRM\r\n *\r\n * - `enabled` - all the logs and exceptions are enabled\r\n * - `custom` - custom rules are set via a `debug()` function\r\n * - `disabled` - all the logs and most exceptions are suppressed\r\n */\r\nexport let debugState: DebugState = 'disabled';\r\n\r\n\r\n/**\r\n * Contains the map for all debug types and their respective error types for the ORM.\r\n */\r\nexport const debugMap: DebugMap = {};\r\n\r\nexport function setDebugState(state: DebugState) {\r\n  debugState = state;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Returns the current error type for a specific type of debugging\r\n */\r\nexport function errorTypeFor(type: string): boolean | ExceptionType;\r\nexport function errorTypeFor(type: RegExp): boolean | ExceptionType;\r\nexport function errorTypeFor(type: DebugType): boolean | ExceptionType;\r\nexport function errorTypeFor(type: string | RegExp | DebugType): boolean | ExceptionType {\r\n  if (debugMap['*']) { return debugMap['*']!; }\r\n\r\n  const isString = (t): t is string => typeof t === 'string';\r\n\r\n  if (isString(type) && debugMap[type]) {\r\n    return debugMap[type]!;\r\n  }\r\n\r\n  if (isString(type)) {\r\n    const matchingType = Object.keys(debugMap)\r\n      .find(t => !!t && t.includes(type) && !!debugMap[t]) as ExceptionType | undefined;\r\n\r\n    return matchingType || false;\r\n  }\r\n\r\n  return (Object.keys(debugMap).find(t => type.test(t)) as ExceptionType | undefined) || false;\r\n}\r\n\r\n\r\nexport function print(instanceName: string, type: any, message: any, level: LogLevel) {\r\n  if (debugState !== 'disabled') {\r\n    const errorType = errorTypeFor(type);\r\n    if (errorType) {\r\n      if (errorType === 'hard' && level === 'error') {\r\n        throw new Error(`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n      } else {\r\n        console[level](`%c${LOG_PREFIX(instanceName)}%c:%c${type}%c - ${message}`,\r\n          'color: purple',\r\n          'color: initial',\r\n          'color: blue',\r\n          'color: initial'\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst decoratedLogs: any = {};\r\n\r\nexport function prints(message: any, level?: LogLevel, type?: string);\r\nexport function prints(message: any, level?: LogLevel, type?: DebugType);\r\nexport function prints(message: any, level?: LogLevel, type?: RegExp);\r\nexport function prints(message: any, level: LogLevel = 'log', type: any = '*') {\r\n  return (target, key: string, desc: PropertyDescriptor) => {\r\n    Object.defineProperty(decoratedLogs, key, desc || {\r\n      value: undefined,\r\n      writable: true,\r\n      enumerable: true\r\n    });\r\n    Object.defineProperty(target, key, {\r\n      get: () => {\r\n        print('', type, message, level);\r\n\r\n        return decoratedLogs[key];\r\n      },\r\n      set: v => {\r\n        decoratedLogs[key] = v;\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { Enumerable } from '../util';\r\nimport { DebugType, errorTypeFor, LogLevel, print } from './module';\r\n\r\nexport abstract class Debugable {\r\n  /**\r\n   * The debug type for this class' actions\r\n   */\r\n  @Enumerable(false)\r\n  protected readonly abstract $debugType: DebugType;\r\n\r\n  /**\r\n   * The name of the WebRM connection this class uses\r\n   */\r\n  @Enumerable(false)\r\n  protected readonly abstract $connectionName: string;\r\n\r\n  /**\r\n   * `true` if the debug is enabled for this class\r\n   */\r\n  @Enumerable(false)\r\n  public get $debugEnabled() { return errorTypeFor(this.$debugType); }\r\n\r\n  @Enumerable(false)\r\n  protected readonly $logFactory = (level: LogLevel) => (message, force: boolean = false) => {\r\n    if (this.$debugEnabled || force) {\r\n      print(this.$connectionName, this.$debugType, message, level);\r\n    }\r\n  };\r\n\r\n  @Enumerable(false)\r\n  protected readonly $log = this.$logFactory('log');\r\n  @Enumerable(false)\r\n  protected readonly $warn = this.$logFactory('warn');\r\n  @Enumerable(false)\r\n  protected readonly $error = this.$logFactory('error');\r\n  @Enumerable(false)\r\n  protected readonly $debug = this.$logFactory('debug');\r\n}\r\n","import { Debugable } from './debugable';\r\nimport { debugMap, debugState, DebugType } from './module';\r\n\r\nclass GlobalDebug extends Debugable {\r\n  protected $debugType: DebugType = '*';\r\n  protected $connectionName: string = '';\r\n  private constructor() { super(); }\r\n\r\n  public static instance = new GlobalDebug();\r\n\r\n  public $log!: Debugable['$log'];\r\n  public $warn!: Debugable['$warn'];\r\n  public $error!: Debugable['$error'];\r\n  public $debug!: Debugable['$debug'];\r\n\r\n  public get map() {\r\n    return debugMap;\r\n  }\r\n\r\n  public get state() {\r\n    return debugState;\r\n  }\r\n}\r\n\r\nexport const Debug = GlobalDebug.instance;\r\n\r\nexport * from './debugable';\r\nexport * from './module';\r\n\r\n","import { Connection } from '../orm';\r\n\r\nexport interface IDriverConstructor extends Function {\r\n  new (connection: Connection): Driver;\r\n\r\n  readonly isSupported: boolean;\r\n}\r\n\r\nexport abstract class Driver {\r\n  constructor(\r\n    protected connection: Connection\r\n  ) {}\r\n\r\n  public abstract create<T extends object>(repositoryName: string, data: T): Promise<T>;\r\n  public abstract read<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, id: any, query: (data: T) => Partial<T>): Promise<T>;\r\n  public abstract update<T extends object>(repositoryName: string, data: Partial<T>): Promise<T>;\r\n  public abstract delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n\r\n  /**\r\n   * Determines if the driver is supported in current environment\r\n   */\r\n  static get isSupported(): boolean {\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n","import { Connection } from '../../orm/connection';\r\nimport { Driver } from '../base';\r\nimport { ApiMap } from './map';\r\n\r\nexport * from './map';\r\n\r\n/* TODO */\r\nexport class ApiDriver extends Driver {\r\n  constructor(\r\n    connection: Connection<any, any>,\r\n    protected apiMap: ApiMap<any>\r\n  ) { super(connection); }\r\n\r\n  public create(repositoryName: string, data: any): Promise<any> {\r\n    const repo = this.apiMap[repositoryName];\r\n\r\n    if (repo && repo.create) {\r\n      return repo.create(data);\r\n    } else {\r\n      return Promise.reject(/* TODO: error handling */);\r\n    }\r\n  }\r\n\r\n  public read(repositoryName: string, data: any): Promise<any> {\r\n    const repo = this.apiMap[repositoryName];\r\n\r\n    if (repo && repo.read) {\r\n      return repo.read(data);\r\n    } else {\r\n      return Promise.reject(/* TODO: error handling */);\r\n    }\r\n  }\r\n\r\n  public update(repositoryName: string, id: any, query: (data: any) => any): Promise<any>;\r\n  public update(repositoryName: string, data: Partial<any>): Promise<any>;\r\n  public async update(repositoryName: any, data: any, query?: any) {\r\n    const repo = this.apiMap[repositoryName];\r\n\r\n    if (!repo || !repo.update) {\r\n      return Promise.reject(/* TODO: error handling */);\r\n    }\r\n\r\n    if (query) {\r\n      const result = await this.read(repositoryName, data);\r\n\r\n      return repo.update(query(result));\r\n    }\r\n\r\n    return repo.update(data);\r\n  }\r\n\r\n  public delete(repositoryName: string, data: any): Promise<any> {\r\n    const repo = this.apiMap[repositoryName];\r\n\r\n    if (repo && repo.delete) {\r\n      return repo.delete(data);\r\n    } else {\r\n      return Promise.reject(/* TODO: error handling */);\r\n    }\r\n  }\r\n\r\n  public static get isSupported() { return true; }\r\n}\r\n","import { Driver } from './base';\r\n\r\n/* TODO: driver that just writes everything to short-term memory */\r\nexport class FallbackDriver extends Driver {\r\n  public create<T extends object>(repositoryName: string, entity: T): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public read<T extends object>(repositoryName: string, id: any): Promise<T> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public update<T extends object>(repositoryName: string, id: any, data: Partial<T>): Promise<T>;\r\n  public update<T extends object>(repositoryName: string, entity: Partial<T>): Promise<T>;\r\n  public async update(repositoryName: any, id: any, data?: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n  public delete<T extends object>(repositoryName: string, id: any): Promise<T>;\r\n  public async delete(repositoryName: any, entity: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return {};\r\n  }\r\n\r\n\r\n}\r\n","import { Debug, Debugable, DebugType } from '../debug';\r\nimport { Driver } from '../drivers';\r\nimport { ApiDriver, DataMap } from '../drivers/api';\r\nimport { IStorableConstructor, Storable } from '../storable';\r\n\r\nexport interface IRepoConnectionInternal {\r\n  name: string;\r\n  currentDriver: Driver;\r\n}\r\n\r\nexport interface IRepoConnection extends IRepoConnectionInternal{\r\n  apiDriver?: ApiDriver;\r\n}\r\n\r\nexport class Repository<\r\n  DM extends DataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Debugable {\r\n  protected readonly $debugType: DebugType = `db:${this.name.toLowerCase()}` as DebugType;\r\n  protected readonly connection: IRepoConnectionInternal;\r\n  public readonly $connectionName: string;\r\n\r\n  constructor(\r\n    public name: string,\r\n    connection: IRepoConnection,\r\n    private Data: C\r\n  ) {\r\n    super();\r\n    if (/* this class was instantiated directly (without inheritance) */\r\n      Repository.prototype === this.constructor.prototype\r\n    ) {\r\n      if (this.$debugEnabled) {\r\n        this.$warn(`Using default empty repository.`);\r\n      } else if (Debug.map.db) {\r\n        this.$warn(`Using default empty repository for ${name}`, true);\r\n      }\r\n    }\r\n\r\n    this.connection = connection;\r\n    this.$connectionName = connection.name;\r\n\r\n    this.api = connection.apiDriver;\r\n  }\r\n\r\n  public readonly api?: ApiDriver;\r\n\r\n  public makeDataInstance(options: A) {\r\n    return new this.Data(options, this);\r\n  }\r\n}\r\n","/**\r\n * Incapsulates the query result data for further manipulation\r\n *\r\n * @template T the type of data encapsulated\r\n */\r\nexport class QueryResult<T> {\r\n  private _ok: boolean;\r\n  private _result: T;\r\n  private _error?: Error;\r\n  private handlers: ((error?: Error, result?: T) => any)[] = [];\r\n\r\n  constructor(ok: boolean, result: T, error?: Error) {\r\n    this._ok = ok;\r\n    this._result = result;\r\n    this._error = error;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the incapsulated data is OK and contains no errors\r\n   */\r\n  public get ok() { return this._ok; }\r\n\r\n  /**\r\n   * The resulting data of the query request\r\n   */\r\n  public get result() { return this._result; }\r\n  public set result(value) {\r\n    this._ok = true;\r\n    this._result = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * The error of the query (if any)\r\n   */\r\n  public get error() { return this._error; }\r\n  public set error(value) {\r\n    this._ok = false;\r\n    this._error = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * Fires a handler whenever the data in the result has been changed\r\n   *\r\n   * @param callback the callback to fire\r\n   */\r\n  public onChange(callback: (error?: Error, result?: T) => any) {\r\n    this.handlers.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the callback from the result data changes\r\n   */\r\n  public offChange(callback: (error?: Error, result?: T) => any) {\r\n    const idx = this.handlers.indexOf(callback);\r\n\r\n    if (idx > -1) {\r\n      this.handlers.splice(idx, 1);\r\n    }\r\n  }\r\n}\r\n","import { DataMap } from '../drivers/api';\r\nimport { QueryResult } from '../queryResult';\r\nimport { Entity, IStorableConstructor, Storable } from '../storable';\r\nimport { Key } from '../util';\r\nimport { IRepoConnection, Repository } from './base';\r\n\r\ntype PartialWithId<T, ID, IDKey extends Key> = Partial<T> & {\r\n  [key in IDKey]: ID;\r\n};\r\n\r\ntype Arg<T extends undefined | ((arg: any) => any)> = T extends (arg: infer U) => any ? U : undefined;\r\n\r\n/**\r\n * A typical multi-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n * @template `ID` entity primary key type\r\n * @template `IDKey` entity primary key name\r\n */\r\nexport class EntityRepository<\r\n  // TODO: hide most of the generic params from end-user..?\r\n  DM extends DataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  ID = E extends Entity<string, infer IdType> ? IdType : any,\r\n  IDKey extends string = E extends Entity<infer IdKey, unknown> ? IdKey : string,\r\n> extends Repository<DM, C, E, A> {\r\n  public readonly columns: Array<string> = [];\r\n  public readonly primaryKey: IDKey;\r\n\r\n  constructor(\r\n    name: string,\r\n    connection: IRepoConnection,\r\n    entity: C\r\n  ) {\r\n    super(name, connection, entity);\r\n    this.primaryKey = entity.prototype.__id__;\r\n\r\n    if (entity.prototype.__col__) {\r\n      this.columns = Object.keys(entity.prototype.__col__);\r\n      delete entity.prototype.__col__;\r\n    } else {\r\n      this.columns = Object.keys(new entity({}, this));\r\n    }\r\n  }\r\n\r\n  public async add(\r\n    options: A,\r\n    // TODO: up to debate - singular arguments always or multiple args inference?\r\n    apiOptions?: Arg<DM['create']>\r\n  ) {\r\n    const result = await this.connection.currentDriver.create(this.name, options);\r\n\r\n    try {\r\n      const instance = this.makeDataInstance(result);\r\n\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult<E>(true, instance);\r\n\r\n      // Call api driver asynchronously\r\n      if (apiOptions && this.api) {\r\n        this.$log(`API handler execution start: ${this.name}.add()`);\r\n\r\n        this.api.create(this.name, apiOptions).then(res => {\r\n          queryResult.result = this.makeDataInstance(result);\r\n          this.$log(`API handler execution end: ${this.name}.add()`);\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n          this.$log(`API handler execution end: ${this.name}.add()`);\r\n        });\r\n      } else {\r\n        this.$log('No API handler detected');\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      this.$error(e);\r\n\r\n      return new QueryResult<E>(false, this.makeDataInstance(options), e);\r\n    }\r\n  }\r\n\r\n  public get(id: ID): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public update(entity: PartialWithId<A, ID, IDKey>): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public updateById(id: ID, query: (entity: E) => Partial<A>): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance(query({} as any) as any)\r\n    );\r\n  }\r\n\r\n  public delete(entity: PartialWithId<A, ID, IDKey> | ID): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  // TODO: Find, find by, exists, etc...\r\n\r\n  public count() {\r\n    // TODO: count entities\r\n  }\r\n}\r\n","import { Debugable, DebugType } from '../debug';\r\nimport { DataMap } from '../drivers/api';\r\nimport { Repository } from '../repository';\r\n\r\nexport type IStorableConstructor<E extends Storable> = new (options, $repository) => E;\r\n\r\nexport abstract class Storable extends Debugable {\r\n  protected $debugType: DebugType = `db:${this.$repository.name}:entity` as DebugType;\r\n  public $connectionName: string = this.$repository.$connectionName;\r\n\r\n  constructor(\r\n    public readonly $repository: Repository<DataMap<any>, IStorableConstructor<any>, any>\r\n  ) { super(); }\r\n\r\n  public abstract $save(): Promise<void>;\r\n  public abstract $delete(): Promise<void>;\r\n}\r\n","import { Repository } from '../repository';\r\nimport { Enumerable, Key } from '../util';\r\nimport { Storable } from './storable';\r\n\r\nexport class Entity<\r\n  IDKey extends Key = string,\r\n  ID = any\r\n> extends Storable {\r\n  // TODO: check to be writable\r\n  @Enumerable(false)\r\n  private __col__: Array<string> = [];\r\n\r\n  @Enumerable(false)\r\n  private __idCol__?: IDKey;\r\n\r\n  @Enumerable(false)\r\n  private __idValue__?: ID;\r\n\r\n  constructor(\r\n    options,\r\n    $repository: Repository<any, any, any>\r\n  ) {\r\n    super($repository);\r\n\r\n    if (this.__idCol__) {\r\n      this.__idValue__ = options[this.__idCol__];\r\n    }\r\n  }\r\n\r\n  @Enumerable(false)\r\n  public $save(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  @Enumerable(false)\r\n  public $delete(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public static Column(target: typeof Entity['prototype'], key: string) {\r\n    target.__col__.push(key);\r\n  }\r\n\r\n  public static ID(target: typeof Entity['prototype'], key: string) {\r\n    target.__idCol__ = key;\r\n  }\r\n}\r\n\r\nexport const Column = Entity.Column;\r\nexport const ID = Entity.ID;\r\n","import { Repository } from '../repository';\r\nimport { Enumerable } from '../util';\r\nimport { Storable } from './storable';\r\n\r\nexport class Record extends Storable {\r\n  constructor(\r\n    options,\r\n    $repository: Repository<any, any, any>\r\n  ) {\r\n    super($repository);\r\n  }\r\n\r\n  @Enumerable(false)\r\n  public $save(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  @Enumerable(false)\r\n  public $delete(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n","import { DataMap } from '../drivers/api';\r\nimport { QueryResult } from '../queryResult';\r\nimport { IStorableConstructor, Storable } from '../storable';\r\nimport { Repository } from './base';\r\n\r\n/**\r\n * A single-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n */\r\nexport class RecordRepository<\r\n  DM extends DataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Repository<DM, C, E, A> {\r\n  public create(options: A): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public update(options: Partial<A>): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public read(): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public delete(): QueryResult<E> {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n}\r\n","import { print } from '../debug';\r\nimport { DataMap } from '../drivers/api';\r\nimport { Entity, IStorableConstructor, Record, Storable } from '../storable';\r\nimport { IRepoConnection, Repository } from './base';\r\nimport { EntityRepository } from './entityRepository';\r\nimport { RecordRepository } from './recordRepository';\r\n\r\nexport function makeRepository<\r\n  DM extends DataMap<any>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n>(\r\n  name: string,\r\n  connection: IRepoConnection,\r\n  data: C\r\n): E extends Entity ? EntityRepository<DM, C, E> : E extends Record ? RecordRepository<DM, C, E> : Repository<DM, C, E> {\r\n  let Constructor: any;\r\n\r\n  if (data.prototype instanceof Entity) {\r\n    Constructor = EntityRepository;\r\n  } else if (data.prototype instanceof Record) {\r\n    Constructor = RecordRepository;\r\n  } else {\r\n    print(\r\n      connection.name,\r\n      'db',\r\n      `No suitable repository found for ${data.name} when trying to connect with ${name}.`,\r\n      'error'\r\n    );\r\n\r\n    Constructor = Repository;\r\n  }\r\n\r\n  return new Constructor(name, connection, data);\r\n}\r\n","import { Debug, Debugable, debugMap, DebugState, debugState, DebugType, ExceptionType, setDebugState } from '../debug';\r\nimport { Driver, IDriverConstructor } from '../drivers';\r\nimport { ApiDriver, ApiMap, DataMap } from '../drivers/api';\r\nimport { FallbackDriver } from '../drivers/fallback';\r\nimport { EntityRepository, makeRepository, RecordRepository, Repository } from '../repository';\r\nimport { Entity, IStorableConstructor, Record } from '../storable';\r\n\r\nexport interface IRepositoryMap {\r\n  [name: string]: IStorableConstructor<any>;\r\n}\r\n\r\nexport type RepoFromConstructor<\r\n  S extends IStorableConstructor<any>,\r\n  D extends DataMap<any> = any\r\n> = InstanceType<S> extends Entity ? EntityRepository<D, S>\r\n  : (InstanceType<S> extends Record ? RecordRepository<D, S> : Repository<D, S>);\r\n\r\ntype PropFrom<O, Key> = Key extends keyof O ? O[Key] : any;\r\n\r\nexport type RepoStore<M extends IRepositoryMap, A extends ApiMap<any>> = {\r\n  [Name in (keyof M | keyof A)]: RepoFromConstructor<PropFrom<M, Name>, PropFrom<A, Name>>;\r\n};\r\n\r\nexport class Connection<\r\n  RM extends IRepositoryMap = IRepositoryMap,\r\n  AM extends ApiMap<RM> = ApiMap<RM>,\r\n> extends Debugable {\r\n  protected $debugType: DebugType = `connection`;\r\n  protected $connectionName: string = this.name;\r\n\r\n  // TODO\r\n  // public static readonly plugins: WebRM.IPlugin[] = [];\r\n\r\n  /**\r\n   * The driver currently used for operations with entities\r\n   */\r\n  public currentDriver: Driver;\r\n\r\n  /**\r\n   * The driver currently used for operations with api requests\r\n   */\r\n  public apiDriver?: ApiDriver;\r\n\r\n  /**\r\n   * A current map of bound repositories\r\n   */\r\n  public repositories: RepoStore<RM, AM> = {} as any;\r\n\r\n  /**\r\n   * Creates a WebRM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public drivers: IDriverConstructor[],\r\n    repositories: RM,\r\n    public readonly apiMap?: AM\r\n  ) {\r\n    super();\r\n\r\n    if (apiMap) {\r\n      this.apiDriver = new ApiDriver(this, apiMap);\r\n    } else {\r\n      Debug.$warn('The main webrm functionality is disabled. Are you sure you want to use this without API?', true);\r\n    }\r\n\r\n    // Select the first supported driver from the bunch\r\n    const SupportedDriver = drivers.find(d => d.isSupported);\r\n\r\n    if (SupportedDriver) {\r\n      // TODO: multi-driver mode\r\n      this.$log(`Using driver \"${SupportedDriver.name}\" as the first supported driver`);\r\n\r\n      this.currentDriver = new SupportedDriver(this);\r\n    } else {\r\n      this.$warn('No supported driver provided. Using fallback.');\r\n\r\n      this.currentDriver = new FallbackDriver(this);\r\n    }\r\n\r\n    let reProxy;\r\n\r\n    if (!Proxy) {\r\n      this.$warn(`window.Proxy is unavailable. Using insufficient property forwarding.`);\r\n\r\n      reProxy = (repoName: string) => Object.defineProperty(this, repoName, {\r\n        get: () => this.repositories[repoName],\r\n      });\r\n    }\r\n\r\n    for (const repoName in repositories) {\r\n      const name: string = repoName;\r\n      const entityConstructor = repositories[name];\r\n\r\n      this.repositories[name] = makeRepository(name, {\r\n        name: this.name,\r\n        apiDriver: this.apiMap && this.apiMap[name] && this.apiDriver,\r\n        currentDriver: this.currentDriver,\r\n      }, entityConstructor);\r\n\r\n      reProxy && reProxy(name);\r\n    }\r\n\r\n    if (Proxy) {\r\n      this.$log(`window.Proxy is available. Using modern property forwarding.`);\r\n\r\n      return new Proxy(this, {\r\n        get(target, key: string) {\r\n          if (!target.repositories[key]) {\r\n            if (!target[key]) {\r\n              target.$log(\r\n                `Repository \"${key}\" is not registered upon initialization. No other property with the same name was found.`\r\n              );\r\n            }\r\n\r\n            return target[key];\r\n          }\r\n\r\n          return target.repositories[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region Debug\r\n\r\n  /**\r\n   * Returns a truthy value if debug is currently enabled\r\n   *\r\n   * Returns a falsy value if debug is currently disabled\r\n   */\r\n  public static $debug(): DebugState;\r\n  /**\r\n   * Enable or disable all debug logs\r\n   */\r\n  public static $debug(enabled: boolean): void;\r\n  /**\r\n   * Enable or disable all debug logs.\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(enabled: boolean, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WebRM\r\n   */\r\n  public static $debug(type: DebugType): void;\r\n  /**\r\n   * Enable a certain debug option for WebRM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: DebugType, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WebRM\r\n   */\r\n  public static $debug(type: string): void;\r\n  /**\r\n   * Enable a certain debug option for WebRM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: string, exceptions: ExceptionType): void;\r\n  public static $debug(type?: boolean | string, exceptions?: ExceptionType) {\r\n    if (typeof type === 'undefined') {\r\n      return debugState;\r\n    }\r\n\r\n    if (typeof type === 'boolean') {\r\n      setDebugState(type ? 'enabled' : 'disabled');\r\n      debugMap['*'] = exceptions || type;\r\n    } else {\r\n      setDebugState('custom');\r\n\r\n      debugMap[type] = exceptions || !debugMap[type];\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { IDriverConstructor } from '../drivers';\r\nimport { ApiMap } from '../drivers/api';\r\nimport { Connection as connection, IRepositoryMap, RepoStore } from './connection';\r\n\r\nexport const Connection = connection as {\r\n  /**\r\n   * Creates a WebRM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure.\r\n   */\r\n  new <\r\n    RM extends IRepositoryMap = IRepositoryMap,\r\n    AM extends ApiMap<RM> = ApiMap<RM>\r\n  >(\r\n      name: string,\r\n      drivers: IDriverConstructor[],\r\n      repositories: RM,\r\n      apiMap?: AM\r\n  ): connection<RM, AM> & RepoStore<RM, AM>;\r\n} & typeof connection;\r\n\r\nexport type Connection<\r\nRM extends IRepositoryMap = any,\r\nAM extends ApiMap<RM> = any\r\n> = connection<RM, AM>;\r\n\r\nexport * from './namespace';\r\n\r\n"],"names":["tslib_1.__decorate","Connection","connection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAWA,AAUO,MAAM,UAAU,GAAG,CAAC,aAAsB,IAAI,KAAK,UAAU,MAAc,EAAE,GAAW,EAAE,OAA2B,EAAE;IAC5H,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;CAC9B,CAAC;;ACvBF,MAAM,UAAU,GAAG,CAAC,IAAY,KAAK,IAAI,GAAG,UAAU,IAAI,GAAG,GAAG,SAAS,CAAC;;;;;;;;AAmD1E,AAAO,IAAI,UAAU,GAAe,UAAU,CAAC;;;;AAM/C,AAAO,MAAM,QAAQ,GAAa,EAAE,CAAC;AAErC,SAAgB,aAAa,CAAC,KAAiB;IAC7C,UAAU,GAAG,KAAK,CAAC;CACpB;AAUD,SAAgB,YAAY,CAAC,IAAiC;IAC5D,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;QAAE,OAAO,QAAQ,CAAC,GAAG,CAAE,CAAC;KAAE;IAE7C,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAkB,OAAO,CAAC,KAAK,QAAQ,CAAC;IAE3D,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;QACpC,OAAO,QAAQ,CAAC,IAAI,CAAE,CAAC;KACxB;IAED,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClB,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aACvC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAA8B,CAAC;QAEpF,OAAO,YAAY,IAAI,KAAK,CAAC;KAC9B;IAED,OAAQ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAA+B,IAAI,KAAK,CAAC;CAC9F;AAGD,SAAgB,KAAK,CAAC,YAAoB,EAAE,IAAS,EAAE,OAAY,EAAE,KAAe;IAClF,IAAI,UAAU,KAAK,UAAU,EAAE;QAC7B,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,SAAS,EAAE;YACb,IAAI,SAAS,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,EAAE;gBAC7C,MAAM,IAAI,KAAK,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,IAAI,MAAM,OAAO,EAAE,CAAC,CAAC;aACrE;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,QAAQ,IAAI,QAAQ,OAAO,EAAE,EACvE,eAAe,EACf,gBAAgB,EAChB,aAAa,EACb,gBAAgB,CACjB,CAAC;aACH;SACF;KACF;CACF;;MCxGqB,SAAS;IAA/B;QAoBqB,gBAAW,GAAG,CAAC,KAAe,KAAK,CAAC,OAAO,EAAE,QAAiB,KAAK;YACpF,IAAI,IAAI,CAAC,aAAa,IAAI,KAAK,EAAE;gBAC/B,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAC9D;SACF,CAAC;QAGiB,SAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE/B,UAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAEjC,WAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEnC,WAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KACvD;;;;IAjBC,IAAW,aAAa,KAAK,OAAO,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE;CAiBrE;AA7BCA;IADC,UAAU,CAAC,KAAK,CAAC;;6CACgC;AAMlDA;IADC,UAAU,CAAC,KAAK,CAAC;;kDACkC;AAMpDA;IADC,UAAU,CAAC,KAAK,CAAC;;;8CACkD;AAGpEA;IADC,UAAU,CAAC,KAAK,CAAC;;8CAKhB;AAGFA;IADC,UAAU,CAAC,KAAK,CAAC;;uCACgC;AAElDA;IADC,UAAU,CAAC,KAAK,CAAC;;wCACkC;AAEpDA;IADC,UAAU,CAAC,KAAK,CAAC;;yCACoC;AAEtDA;IADC,UAAU,CAAC,KAAK,CAAC;;yCACoC;;ACjCxD,MAAM,WAAY,SAAQ,SAAS;IAGjC;QAAwB,KAAK,EAAE,CAAC;QAFtB,eAAU,GAAc,GAAG,CAAC;QAC5B,oBAAe,GAAW,EAAE,CAAC;KACL;IASlC,IAAW,GAAG;QACZ,OAAO,QAAQ,CAAC;KACjB;IAED,IAAW,KAAK;QACd,OAAO,UAAU,CAAC;KACnB;;AAba,oBAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;AAgB7C,AAAO,MAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;;MChBpB,MAAM;IAC1B,YACY,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAC9B;;;;IAWJ,WAAW,WAAW;QACpB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;KACrC;CACF;;ACnBD;AACA,MAAa,SAAU,SAAQ,MAAM;IACnC,YACE,UAAgC,EACtB,MAAmB;QAC3B,KAAK,CAAC,UAAU,CAAC,CAAC;QADV,WAAM,GAAN,MAAM,CAAa;KACP;IAEjB,MAAM,CAAC,cAAsB,EAAE,IAAS;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEzC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC1B;aAAM;YACL,OAAO,OAAO,CAAC,MAAM,6BAA4B,CAAC;SACnD;KACF;IAEM,IAAI,CAAC,cAAsB,EAAE,IAAS;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEzC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxB;aAAM;YACL,OAAO,OAAO,CAAC,MAAM,6BAA4B,CAAC;SACnD;KACF;IAIY,MAAM,CAAC,cAAmB,EAAE,IAAS,EAAE,KAAW;;YAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAEzC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACzB,OAAO,OAAO,CAAC,MAAM,6BAA4B,CAAC;aACnD;YAED,IAAI,KAAK,EAAE;gBACT,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;gBAErD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aACnC;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC1B;KAAA;IAEM,MAAM,CAAC,cAAsB,EAAE,IAAS;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEzC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC1B;aAAM;YACL,OAAO,OAAO,CAAC,MAAM,6BAA4B,CAAC;SACnD;KACF;IAEM,WAAW,WAAW,KAAK,OAAO,IAAI,CAAC,EAAE;CACjD;;AC5DD;AACA,MAAa,cAAe,SAAQ,MAAM;IACjC,MAAM,CAAmB,cAAsB,EAAE,MAAS;QAC/D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAEM,IAAI,CAAmB,cAAsB,EAAE,EAAO;QAC3D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAIY,MAAM,CAAC,cAAmB,EAAE,EAAO,EAAE,IAAU;;YAC1D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAE3C,OAAO,EAAE,CAAC;SACX;KAAA;IAEY,MAAM,CAAC,cAAmB,EAAE,MAAW;;YAClD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;YAE3C,OAAO,EAAE,CAAC;SACX;KAAA;CAGF;;MCbY,UAKX,SAAQ,SAAS;IAKjB,YACS,IAAY,EACnB,UAA2B,EACnB,IAAO;QAEf,KAAK,EAAE,CAAC;QAJD,SAAI,GAAJ,IAAI,CAAQ;QAEX,SAAI,GAAJ,IAAI,CAAG;QAPE,eAAU,GAAc,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAe,CAAC;QAUtF,qEACE,UAAU,CAAC,SAAS,KAAK,IAAI,CAAC,WAAW,CAAC,SAAS,EACnD;YACA,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;aAC/C;iBAAM,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE;gBACvB,IAAI,CAAC,KAAK,CAAC,sCAAsC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;aAChE;SACF;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC;QAEvC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC;KACjC;IAIM,gBAAgB,CAAC,OAAU;QAChC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACrC;CACF;;ACnDD;;;;;AAKA,MAAa,WAAW;IAMtB,YAAY,EAAW,EAAE,MAAS,EAAE,KAAa;QAFzC,aAAQ,GAA2C,EAAE,CAAC;QAG5D,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;;;;IAKD,IAAW,EAAE,KAAK,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE;;;;IAKpC,IAAW,MAAM,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;IAC5C,IAAW,MAAM,CAAC,KAAK;QACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KACxD;;;;IAKD,IAAW,KAAK,KAAK,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;IAC1C,IAAW,KAAK,CAAC,KAAK;QACpB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KACxD;;;;;;IAOM,QAAQ,CAAC,QAA4C;QAC1D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC9B;;;;IAKM,SAAS,CAAC,QAA4C;QAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SAC9B;KACF;CACF;;ACjDD;;;;;;;;;;AAUA,MAAa,gBAQX,SAAQ,UAAuB;IAI/B,YACE,IAAY,EACZ,UAA2B,EAC3B,MAAS;QAET,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QARlB,YAAO,GAAkB,EAAE,CAAC;QAS1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;QAE1C,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACrD,OAAO,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;SACjC;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;SAClD;KACF;IAEY,GAAG,CACd,OAAU;;IAEV,UAA8B;;YAE9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAE9E,IAAI;gBACF,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;;gBAG/C,MAAM,WAAW,GAAG,IAAI,WAAW,CAAI,IAAI,EAAE,QAAQ,CAAC,CAAC;;gBAGvD,IAAI,UAAU,IAAI,IAAI,CAAC,GAAG,EAAE;oBAC1B,IAAI,CAAC,IAAI,CAAC,gCAAgC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC;oBAE7D,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG;wBAC7C,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;wBACnD,IAAI,CAAC,IAAI,CAAC,8BAA8B,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC;qBAC5D,CAAC,CAAC,KAAK,CAAC,CAAC;wBACR,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;wBACtB,IAAI,CAAC,IAAI,CAAC,8BAA8B,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC;qBAC5D,CAAC,CAAC;iBACJ;qBAAM;oBACL,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;iBACtC;gBAED,OAAO,WAAW,CAAC;aACpB;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEf,OAAO,IAAI,WAAW,CAAI,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;aACrE;SACF;KAAA;IAEM,GAAG,CAAC,EAAM;QACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;IAEM,MAAM,CAAC,MAAmC;QAC/C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;IAEM,UAAU,CAAC,EAAM,EAAE,KAAgC;QACxD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAS,CAAQ,CAAC,CAC/C,CAAC;KACH;IAEM,MAAM,CAAC,MAAwC;QACpD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;;IAIM,KAAK;;KAEX;CACF;;MCzHqB,QAAS,SAAQ,SAAS;IAI9C,YACkB,WAAqE;QACnF,KAAK,EAAE,CAAC;QADM,gBAAW,GAAX,WAAW,CAA0D;QAJ7E,eAAU,GAAc,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,SAAsB,CAAC;QAC7E,oBAAe,GAAW,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;KAIpD;CAIf;;MCZY,MAGX,SAAQ,QAAQ;IAWhB,YACE,OAAO,EACP,WAAsC;QAEtC,KAAK,CAAC,WAAW,CAAC,CAAC;;QAZb,YAAO,GAAkB,EAAE,CAAC;QAclC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5C;KACF;IAGM,KAAK;;QAEV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAGM,OAAO;;QAEZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAEM,OAAO,MAAM,CAAC,MAAkC,EAAE,GAAW;QAClE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;IAEM,OAAO,EAAE,CAAC,MAAkC,EAAE,GAAW;QAC9D,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;KACxB;CACF;AAtCCA;IADC,UAAU,CAAC,KAAK,CAAC;8BACD,KAAK;uCAAc;AAGpCA;IADC,UAAU,CAAC,KAAK,CAAC;;yCACQ;AAG1BA;IADC,UAAU,CAAC,KAAK,CAAC;;2CACO;AAczBA;IADC,UAAU,CAAC,KAAK,CAAC;;;;mCAIjB;AAGDA;IADC,UAAU,CAAC,KAAK,CAAC;;;;qCAIjB;AAWH,MAAa,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AACpC,MAAa,EAAE,GAAG,MAAM,CAAC,EAAE;;MC/Cd,MAAO,SAAQ,QAAQ;IAClC,YACE,OAAO,EACP,WAAsC;QAEtC,KAAK,CAAC,WAAW,CAAC,CAAC;KACpB;IAGM,KAAK;;QAEV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAGM,OAAO;;QAEZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;CACF;AAVCA;IADC,UAAU,CAAC,KAAK,CAAC;;;;mCAIjB;AAGDA;IADC,UAAU,CAAC,KAAK,CAAC;;;;qCAIjB;;ACjBH;;;;;;;;AAQA,MAAa,gBAKX,SAAQ,UAAuB;IACxB,MAAM,CAAC,OAAU;QACtB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;IAEM,MAAM,CAAC,OAAmB;QAC/B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;IAEM,IAAI;QACT,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;IAEM,MAAM;QACX,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEnC,OAAO,IAAI,WAAW,4BACpB,IAAI,EACJ,IAAI,CAAC,gBAAgB,CAAC,EAAS,CAAC,CACjC,CAAC;KACH;CACF;;SC/Ce,cAAc,CAK5B,IAAY,EACZ,UAA2B,EAC3B,IAAO;IAEP,IAAI,WAAgB,CAAC;IAErB,IAAI,IAAI,CAAC,SAAS,YAAY,MAAM,EAAE;QACpC,WAAW,GAAG,gBAAgB,CAAC;KAChC;SAAM,IAAI,IAAI,CAAC,SAAS,YAAY,MAAM,EAAE;QAC3C,WAAW,GAAG,gBAAgB,CAAC;KAChC;SAAM;QACL,KAAK,CACH,UAAU,CAAC,IAAI,EACf,IAAI,EACJ,oCAAoC,IAAI,CAAC,IAAI,gCAAgC,IAAI,GAAG,EACpF,OAAO,CACR,CAAC;QAEF,WAAW,GAAG,UAAU,CAAC;KAC1B;IAED,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;CAChD;;MCXY,UAGX,SAAQ,SAAS;;;;;;;;IA6BjB,YACS,IAAY,EACZ,OAA6B,EACpC,YAAgB,EACA,MAAW;QAE3B,KAAK,EAAE,CAAC;QALD,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAsB;QAEpB,WAAM,GAAN,MAAM,CAAK;QAhCnB,eAAU,GAAc,YAAY,CAAC;QACrC,oBAAe,GAAW,IAAI,CAAC,IAAI,CAAC;;;;QAkBvC,iBAAY,GAAsB,EAAS,CAAC;QAiBjD,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC9C;aAAM;YACL,KAAK,CAAC,KAAK,CAAC,0FAA0F,EAAE,IAAI,CAAC,CAAC;SAC/G;;QAGD,MAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC;QAEzD,IAAI,eAAe,EAAE;;YAEnB,IAAI,CAAC,IAAI,CAAC,iBAAiB,eAAe,CAAC,IAAI,iCAAiC,CAAC,CAAC;YAElF,IAAI,CAAC,aAAa,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;SAChD;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAE5D,IAAI,CAAC,aAAa,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;SAC/C;QAED,IAAI,OAAO,CAAC;QAEZ,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;YAEnF,OAAO,GAAG,CAAC,QAAgB,KAAK,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;gBACpE,GAAG,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;aACvC,CAAC,CAAC;SACJ;QAED,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE;YACnC,MAAM,IAAI,GAAW,QAAQ,CAAC;YAC9B,MAAM,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YAE7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,EAAE;gBAC7C,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,SAAS,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS;gBAC7D,aAAa,EAAE,IAAI,CAAC,aAAa;aAClC,EAAE,iBAAiB,CAAC,CAAC;YAEtB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;SAC1B;QAED,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,IAAI,CAAC,8DAA8D,CAAC,CAAC;YAE1E,OAAO,IAAI,KAAK,CAAC,IAAI,EAAE;gBACrB,GAAG,CAAC,MAAM,EAAE,GAAW;oBACrB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;wBAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;4BAChB,MAAM,CAAC,IAAI,CACT,eAAe,GAAG,0FAA0F,CAC7G,CAAC;yBACH;wBAED,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;qBACpB;oBAED,OAAO,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBACjC;aACF,CAAC,CAAC;SACJ;KACF;IAiDM,OAAO,MAAM,CAAC,IAAuB,EAAE,UAA0B;QACtE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,UAAU,CAAC;SACnB;QAED,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC7B,aAAa,CAAC,IAAI,GAAG,SAAS,GAAG,UAAU,CAAC,CAAC;YAC7C,QAAQ,CAAC,GAAG,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC;SACpC;aAAM;YACL,aAAa,CAAC,QAAQ,CAAC,CAAC;YAExB,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAU,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAChD;QAED,OAAO;KACR;CAGF;;MC5LYC,YAAU,GAAGC;;;;"}