{"version":3,"file":"webalorm.cjs.js","sources":["../src/decorators/index.ts","../src/debug/module.ts","../src/debug/debugable.ts","../src/debug/index.ts","../src/drivers/base.ts","../src/drivers/fallback.ts","../src/drivers/multiDriver.ts","../src/repository/base.ts","../src/repository/broken.ts","../src/queryResult.ts","../src/repository/entity.ts","../src/storable/storable.ts","../src/storable/entity.ts","../src/storable/record.ts","../src/repository/record.ts","../src/repository/factory.ts","../src/orm/connection.ts","../src/orm/index.ts"],"sourcesContent":["export const enumerable = (isEnumerable: boolean = true) => function (target: object, key: string, desc?: PropertyDescriptor) {\r\n  let descriptor = Object.getOwnPropertyDescriptor(target, key) || {};\r\n  if (descriptor.enumerable != isEnumerable) {\r\n    descriptor.enumerable = isEnumerable;\r\n    Object.defineProperty(target, key, descriptor);\r\n  }\r\n};\r\n","const LOG_PREFIX = (name: string) => name ? `[webalorm:${name}]` : `[webalorm]`;\r\n\r\n/**\r\n * A type of debug errors\r\n *\r\n * - `soft` - informative, only logs to console\r\n * - `hard` - throws exceptions, forcing proper error-handling\r\n */\r\nexport type ExceptionType = 'soft' | 'hard';\r\n\r\n/**\r\n * Dictates the type of debug to set\r\n *\r\n * - `*` - debug everything\r\n * - `connection` - debug the orm connection\r\n * - `driver` - debug all drivers\r\n * - `driver:${name}` - debug a driver with ${name}\r\n * - `db` - debug all repositories\r\n * - `db:${name}` - debug a repo with ${name}\r\n * - `db:${name}:entity` - debug all entities in the repository\r\n */\r\nexport type DebugType = '*'\r\n  | 'connection'\r\n  | 'driver'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'driver:${name}'\r\n  | 'db'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}'\r\n  // tslint:disable-next-line:no-invalid-template-strings - Need this for correct autocomplete\r\n  | 'db:${name}:entity';\r\n\r\nexport type DebugState = 'enabled' | 'disabled' | 'custom';\r\n\r\n/**\r\n * Maps all debug types to all errors types, telling which debug type will throw\r\n */\r\nexport type DebugMap = Partial<{\r\n  [key: string]: boolean | ExceptionType;\r\n}>;\r\n\r\nexport type LogLevel = 'log' | 'debug' | 'warn' | 'error';\r\n\r\n\r\n/**\r\n * Shows the current debug state of WEBALORM\r\n *\r\n * - `enabled` - all the logs and exceptions are enabled\r\n * - `custom` - custom rules are set via a `debug()` function\r\n * - `disabled` - all the logs and most exceptions are suppressed\r\n */\r\nexport let debugState: DebugState = 'disabled';\r\n\r\n\r\n/**\r\n * Contains the map for all debug types and their respective error types for the ORM.\r\n */\r\nexport const debugMap: DebugMap = {};\r\n\r\nexport function setDebugState(state: DebugState) {\r\n  debugState = state;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Returns the current error type for a specific type of debugging\r\n */\r\nexport function errorTypeFor(type: string): boolean | ExceptionType;\r\nexport function errorTypeFor(type: RegExp): boolean | ExceptionType;\r\nexport function errorTypeFor(type: DebugType): boolean | ExceptionType;\r\nexport function errorTypeFor(type: string | RegExp | DebugType): boolean | ExceptionType {\r\n  if (debugMap['*']) { return debugMap['*']!; }\r\n\r\n  const isString = (t): t is string => typeof t === 'string';\r\n\r\n  if (isString(type) && debugMap[type]) {\r\n    return debugMap[type]!;\r\n  }\r\n\r\n  if (isString(type)) {\r\n    const matchingType = Object.keys(debugMap)\r\n      .find(t => !!t && t.includes(type) && !!debugMap[t]) as ExceptionType | undefined;\r\n\r\n    return matchingType || false;\r\n  }\r\n\r\n  return (Object.keys(debugMap).find(t => type.test(t)) as ExceptionType | undefined) || false;\r\n}\r\n\r\n\r\nexport function print(instanceName: string, type: any, message: any, level: LogLevel, force: boolean = false) {\r\n  if ((debugState !== 'disabled') || force) {\r\n    const errorType = errorTypeFor(type);\r\n    if (errorType) {\r\n      if (errorType === 'hard' && level === 'error') {\r\n        throw new Error(`${LOG_PREFIX(instanceName)}:${type} - ${message}`);\r\n      } else {\r\n        console[level](`%c${LOG_PREFIX(instanceName)}%c:%c${type}%c - ${message}`,\r\n          'color: purple',\r\n          'color: initial',\r\n          'color: blue',\r\n          'color: initial'\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { enumerable } from '../decorators';\r\nimport { DebugType, errorTypeFor, LogLevel, print } from './module';\r\n\r\nexport abstract class Debugable {\r\n  /**\r\n   * The debug type for this class' actions\r\n   */\r\n  @enumerable(false)\r\n  protected readonly abstract $debugType: DebugType;\r\n\r\n  /**\r\n   * The name of the WEBALORM connection this class uses\r\n   */\r\n  @enumerable(false)\r\n  protected readonly abstract $connectionName: string;\r\n\r\n  /**\r\n   * `true` if the debug is enabled for this class\r\n   */\r\n  @enumerable(false)\r\n  public get $debugEnabled() { return errorTypeFor(this.$debugType); }\r\n\r\n  @enumerable(false)\r\n  private readonly $logFactory = (level: LogLevel) => (message, force: boolean = false) =>\r\n      print(this.$connectionName, this.$debugType, message, level, force);\r\n\r\n  @enumerable(false)\r\n  protected readonly $log = this.$logFactory('log');\r\n  @enumerable(false)\r\n  protected readonly $warn = this.$logFactory('warn');\r\n  @enumerable(false)\r\n  protected readonly $error = this.$logFactory('error');\r\n  @enumerable(false)\r\n  protected readonly $debug = this.$logFactory('debug');\r\n}\r\n","import { Debugable } from './debugable';\r\nimport { debugMap, debugState, DebugType } from './module';\r\n\r\nclass GlobalDebug extends Debugable {\r\n  protected $debugType: DebugType = '*';\r\n  protected $connectionName: string = '';\r\n  private constructor() { super(); }\r\n\r\n  public static instance = new GlobalDebug();\r\n\r\n  public $log!: Debugable['$log'];\r\n  public $warn!: Debugable['$warn'];\r\n  public $error!: Debugable['$error'];\r\n  public $debug!: Debugable['$debug'];\r\n\r\n  public get map() {\r\n    return debugMap;\r\n  }\r\n\r\n  public get state() {\r\n    return debugState;\r\n  }\r\n}\r\n\r\nexport const Debug = GlobalDebug.instance;\r\n\r\nexport * from './debugable';\r\nexport * from './module';\r\n\r\n","import { Connection } from '../orm';\r\nimport { IRepoData } from '../repository';\r\n\r\nexport interface IDriverConstructor extends Function {\r\n  new (connection: Connection): Driver;\r\n\r\n  readonly isSupported: boolean;\r\n}\r\n\r\nexport abstract class Driver {\r\n  constructor(\r\n    protected connection: Connection\r\n  ) {}\r\n\r\n  /* TODO: additional driver functionality?.. */\r\n\r\n\r\n  public abstract create<A, R extends IRepoData = IRepoData>(\r\n    repository: R,\r\n    data: A\r\n  ): Promise<A>;\r\n\r\n  public abstract read<A, R extends IRepoData = IRepoData>(\r\n    repository: R,\r\n    id: any\r\n  ): Promise<A>;\r\n\r\n  public abstract update<A, R extends IRepoData = IRepoData>(\r\n    repository: R,\r\n    id: any,\r\n    query: (data: A) => Partial<A>\r\n  ): Promise<A>;\r\n  public abstract update<A, R extends IRepoData = IRepoData>(\r\n    repository: R,\r\n    data: Partial<A>\r\n  ): Promise<A>;\r\n\r\n  public abstract delete<A, R extends IRepoData = IRepoData>(\r\n    repository: R,\r\n    id: any\r\n  ): Promise<A>;\r\n\r\n  /**\r\n   * Determines if the driver is supported in current environment\r\n   */\r\n  static get isSupported(): boolean {\r\n    throw new Error('Not implemented.');\r\n  }\r\n}\r\n","import { IEntityRepoData, IRepoData } from '../repository';\r\nimport { Driver } from './base';\r\n\r\nconst isEntityRepo = (r): r is IEntityRepoData<any> => !!(r as IEntityRepoData<any>).columns;\r\n\r\n/* TODO: driver that just writes everything to short-term memory */\r\nexport class FallbackDriver extends Driver {\r\n  public async create<A, R extends IRepoData = IRepoData>(repository: R, data: A): Promise<A> {\r\n    if (isEntityRepo(repository)) {\r\n      this.repositoryMap[repository.name] = {};\r\n\r\n      this.repositoryMap[repository.name][data[repository.primaryKey]] = data;\r\n    } else {\r\n      this.repositoryMap[repository.name] = data;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  public read<A, R extends IRepoData = IRepoData>(repository: R, id: any): Promise<A> {\r\n    if (isEntityRepo(repository)) {\r\n      return this.repositoryMap[repository.name][id];\r\n    }\r\n\r\n    return this.repositoryMap[repository.name];\r\n  }\r\n\r\n  public update<A, R extends IRepoData = IRepoData>(repository: R, id: any, query: (data: A) => Partial<A>): Promise<A>;\r\n  public update<A, R extends IRepoData = IRepoData>(repository: R, data: Partial<A>): Promise<A>;\r\n  public update(repository: any, id: any, query?: any) {\r\n    throw new Error('Method not implemented.');\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  public delete<A, R extends IRepoData = IRepoData>(repository: R, entity: any): Promise<A> {\r\n    const repo = this.repositoryMap[repository.name];\r\n\r\n    let res;\r\n\r\n    if (isEntityRepo(repository)) {\r\n      const key = Object.keys(repo).findIndex(e => Object.keys(repo[e]).some(key => {\r\n        return e[key] === entity[key];\r\n      }));\r\n\r\n      res = this.repositoryMap[repository.name][key];\r\n\r\n      this.repositoryMap[repository.name][key] = undefined;\r\n\r\n      delete this.repositoryMap[repository.name][key];\r\n    } else {\r\n      res = this.repositoryMap[repository.name];\r\n\r\n      this.repositoryMap[repository.name] = undefined;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  private repositoryMap: any = {};\r\n}\r\n","import { Connection } from '../orm';\r\nimport { IRepoData } from '../repository';\r\nimport { Driver, IDriverConstructor } from './base';\r\n\r\nexport class MultiDriver extends Driver {\r\n  private drivers: Driver[];\r\n\r\n  constructor(\r\n    connection: Connection,\r\n    drivers: IDriverConstructor[]\r\n  ) {\r\n    super(connection);\r\n\r\n    this.drivers = drivers.filter(d => d.isSupported).map(D => new D(connection));\r\n  }\r\n\r\n  private request(type: 'create' | 'update' | 'read' | 'delete') {\r\n    return function (this: MultiDriver) {\r\n      const args = arguments;\r\n      const allResponses = Promise.all(this.drivers.map(d => d[type].apply(d, args)));\r\n\r\n      return allResponses[0];\r\n    }.bind(this);\r\n  }\r\n\r\n  public readonly create: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, data: A): Promise<A>;\r\n  } = this.request('create');\r\n\r\n  public readonly read: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any): Promise<A>;\r\n  } = this.request('read');\r\n\r\n  public readonly update: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any, query: (data: A) => Partial<A>): Promise<A>;\r\n    <A, R extends IRepoData = IRepoData>(repository: R, data: Partial<A>): Promise<A>;\r\n  } = this.request('update');\r\n\r\n  public readonly delete: {\r\n    <A, R extends IRepoData = IRepoData>(repository: R, id: any): Promise<A>;\r\n  } = this.request('delete');\r\n\r\n  public static get isSupported() { return true; }\r\n}\r\n","import { DataMap } from '../apiMap';\r\nimport { Debug, Debugable, DebugType } from '../debug';\r\nimport { Driver } from '../drivers';\r\nimport { IStorableConstructor, Storable } from '../storable';\r\n\r\nexport interface IRepoConnectionInternal {\r\n  name: string;\r\n  currentDriver: Driver;\r\n}\r\n\r\nexport interface IRepoConnection<DM> extends IRepoConnectionInternal {\r\n  apiMap: DM;\r\n}\r\n\r\nexport interface IRepoData {\r\n  name: string;\r\n}\r\n\r\nexport type FromSecArg<\r\n  T extends undefined | ((arg: any, other: any) => any)\r\n> = T extends ((arg: any, other: infer U) => any) ? U : undefined;\r\n\r\nexport abstract class Repository<\r\n  DM extends DataMap<C> | undefined,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n> extends Debugable implements IRepoData {\r\n  protected readonly $debugType: DebugType = `db:${this.name.toLowerCase()}` as DebugType;\r\n  protected readonly connection: IRepoConnectionInternal;\r\n  public readonly $connectionName: string;\r\n\r\n  constructor(\r\n    public name: string,\r\n    connection: IRepoConnection<DM>,\r\n    private Data: C\r\n  ) {\r\n    super();\r\n    this.connection = connection;\r\n    this.$connectionName = connection.name;\r\n\r\n    this.api = connection.apiMap;\r\n\r\n    if (/* this class was instantiated directly (without inheritance) */\r\n      Repository.prototype === this.constructor.prototype\r\n    ) {\r\n      if (this.$debugEnabled) {\r\n        this.$warn(`Using default empty repository.`);\r\n      } else {\r\n        Debug.$warn(`Using default empty repository for ${name}`, true);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  protected readonly api: DM;\r\n\r\n  protected makeDataInstance(options: A) {\r\n    return new this.Data(options, this);\r\n  }\r\n}\r\n","import { BrokenDataMap } from '../apiMap';\r\nimport { Repository } from './base';\r\n\r\nexport class BrokenRepository<DM extends BrokenDataMap<any>> extends Repository<DM, any> {\r\n  public get API() {\r\n    return this.api;\r\n  }\r\n}\r\n","/**\r\n * Incapsulates the query result data for further manipulation\r\n *\r\n * @template T the type of data encapsulated\r\n */\r\nexport class QueryResult<T> {\r\n  private _ok: boolean;\r\n  private _result: T;\r\n  private _error?: Error;\r\n  private handlers: ((error?: Error, result?: T) => any)[] = [];\r\n\r\n  constructor(ok: boolean, result: T, error?: Error) {\r\n    this._ok = ok;\r\n    this._result = result;\r\n    this._error = error;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the incapsulated data is OK and contains no errors\r\n   */\r\n  public get ok() { return this._ok; }\r\n\r\n  /**\r\n   * The resulting data of the query request\r\n   */\r\n  public get result() { return this._result; }\r\n  public set result(value) {\r\n    this._ok = true;\r\n    this._result = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * The error of the query (if any)\r\n   */\r\n  public get error() { return this._error; }\r\n  public set error(value) {\r\n    this._ok = false;\r\n    this._error = value;\r\n    this.handlers.forEach(h => h(this.error, this.result));\r\n  }\r\n\r\n  /**\r\n   * Fires a handler whenever the data in the result has been changed\r\n   *\r\n   * @param callback the callback to fire\r\n   */\r\n  public onChange(callback: (error?: Error, result?: T) => any) {\r\n    this.handlers.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe the callback from the result data changes\r\n   */\r\n  public offChange(callback: (error?: Error, result?: T) => any) {\r\n    const idx = this.handlers.indexOf(callback);\r\n\r\n    if (idx > -1) {\r\n      this.handlers.splice(idx, 1);\r\n    }\r\n  }\r\n}\r\n","import { EntityDataMap } from '../apiMap';\r\nimport { QueryResult } from '../queryResult';\r\nimport { Entity, IStorableConstructor } from '../storable';\r\nimport { FromSecArg, IRepoConnection, IRepoData, Repository } from './base';\r\n\r\ntype PartialWithId<T, ID, IDKey extends PropertyKey> = Partial<T> & {\r\n  [key in IDKey]: ID;\r\n};\r\n\r\nexport interface IEntityRepoData<IDKey extends PropertyKey> extends IRepoData {\r\n  readonly columns: Array<string>;\r\n  readonly primaryKey: IDKey;\r\n}\r\n\r\nexport interface IEntityRepoMethods<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  ID = E extends Entity<string, infer IdType> ? IdType : any,\r\n  IDKey extends PropertyKey = E extends Entity<infer IdKey, unknown> ? IdKey : string,\r\n> {\r\n  add(\r\n    options: A,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  get(\r\n    id: ID,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  update(\r\n    entity: PartialWithId<A, ID, IDKey> | ID,\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  delete(\r\n    entity: PartialWithId<A, ID, IDKey> | ID,\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  //...\r\n  // TODO - other methods\r\n}\r\n\r\n/**\r\n * A typical multi-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n * @template `ID` entity primary key type\r\n * @template `IDKey` entity primary key name\r\n */\r\nexport class EntityRepository<\r\n  DM extends EntityDataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Entity = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n  ID = E extends Entity<string, infer IdType> ? IdType : any,\r\n  IDKey extends PropertyKey = E extends Entity<infer IdKey, unknown> ? IdKey : string,\r\n> extends Repository<DM, C, E, A> implements IEntityRepoData<IDKey>, IEntityRepoMethods<C, E, A, ID, IDKey> {\r\n\r\n  public readonly columns: Array<string> = [];\r\n  public readonly primaryKey: IDKey;\r\n\r\n  constructor(\r\n    name: string,\r\n    connection: IRepoConnection<DM>,\r\n    entity: C\r\n  ) {\r\n    super(name, connection, entity);\r\n    this.primaryKey = entity.prototype.__idCol__;\r\n    delete entity.prototype.__idCol__;\r\n\r\n    if (entity.prototype.__col__) {\r\n      this.columns = entity.prototype.__col__;\r\n      delete entity.prototype.__col__;\r\n    } else {\r\n      this.columns = Object.keys(new entity({}, this));\r\n    }\r\n  }\r\n\r\n  private get driverOptions(): IEntityRepoData<IDKey> {\r\n    return {\r\n      name: this.name,\r\n      columns: this.columns,\r\n      primaryKey: this.primaryKey\r\n    };\r\n  }\r\n\r\n  public async add(\r\n    options: A,\r\n    // TODO: up to debate - singular arguments always or multiple args inference?\r\n    apiOptions?: FromSecArg<DM['add']> | false // Pass false to disable the api call\r\n  ) {\r\n    try {\r\n      const result = await this.connection.currentDriver.create<A, IEntityRepoData<IDKey>>(this.driverOptions, options);\r\n\r\n      const instance = this.makeDataInstance(result);\r\n\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult(true, instance);\r\n\r\n      // Call api driver asynchronously\r\n      if (this.api && this.api.add && apiOptions !== false) {\r\n        this.$log(`API handler execution start: ${this.name}.add()`);\r\n\r\n        // @TODO: implement async request queue\r\n        this.api.add(options, apiOptions).then(res => {\r\n          queryResult.result = this.makeDataInstance(res);\r\n          this.$log(`API handler execution end: ${this.name}.add() => ${JSON.stringify(res, undefined, '  ')}`);\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n          this.$error(`API handler execution end: ${this.name}.add() => ${e}`);\r\n        });\r\n      } else {\r\n        this.$log('No API handler called');\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      this.$error(e);\r\n\r\n      return new QueryResult<E>(false, this.makeDataInstance(options), e);\r\n    }\r\n  }\r\n\r\n  public async get(\r\n    id: ID,\r\n    getApiOptions?: FromSecArg<DM['get']> | false\r\n  ) {\r\n    try {\r\n      const result = await this.connection.currentDriver.read<A, IEntityRepoData<IDKey>>(this.driverOptions, id);\r\n\r\n      const instance = this.makeDataInstance(result);\r\n\r\n      // Call local driver changes synchronously\r\n      const queryResult = new QueryResult(true, instance);\r\n\r\n      // Call api driver asynchronously\r\n      if (this.api && this.api.get && getApiOptions !== false) {\r\n        this.$log(`API handler execution start: ${this.name}.get()`);\r\n\r\n        // @TODO: implement async request queue\r\n        this.api.get(id as any, getApiOptions).then(res => {\r\n          queryResult.result = this.makeDataInstance(res);\r\n          this.$log(`API handler execution end: ${this.name}.get() => ${JSON.stringify(res, undefined, '  ')}`);\r\n        }).catch(e => {\r\n          queryResult.error = e;\r\n          this.$error(`API handler execution end: ${this.name}.get() => ${e}`);\r\n        });\r\n      } else {\r\n        this.$log('No API handler called');\r\n      }\r\n\r\n      return queryResult;\r\n    } catch (e) {\r\n      return new QueryResult(\r\n        false,\r\n        undefined,\r\n        e\r\n      );\r\n    }\r\n  }\r\n\r\n  public async update(\r\n    entity: PartialWithId<A, ID, IDKey>,\r\n    updateApiOptions?: FromSecArg<DM['update']>\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  /* Do we even need this?.. */\r\n  public async updateById(\r\n    id: ID,\r\n    query: (entity: E) => Partial<A>,\r\n    // updateApiOptions?: FromSecArg<DM['updateById']>\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance(query({} as any) as any)\r\n    );\r\n  }\r\n\r\n  public async delete(\r\n    entity: PartialWithId<A, ID, IDKey> | ID,\r\n    deleteApiOptions?: FromSecArg<DM['delete']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  // TODO: Find, find by, exists, etc...\r\n\r\n  public async count() {\r\n    // TODO: count entities\r\n  }\r\n\r\n  // TODO: Cluster operations\r\n}\r\n","import { Debugable, DebugType } from '../debug';\r\nimport { Repository } from '../repository';\r\n\r\nexport type IStorableConstructor<E extends Storable> = new (options, $repository) => E;\r\n\r\nexport abstract class Storable extends Debugable {\r\n  protected $debugType: DebugType = `db:${this.$repository.name}:entity` as DebugType;\r\n  public $connectionName: string = this.$repository.$connectionName;\r\n\r\n  constructor(\r\n    public readonly $repository: Repository<any, any>\r\n  ) { super(); }\r\n\r\n  public abstract $save(): Promise<void>;\r\n  public abstract $delete(): Promise<void>;\r\n}\r\n","import { enumerable } from '../decorators';\r\nimport { Repository } from '../repository';\r\nimport { Storable } from './storable';\r\n\r\nexport class Entity<\r\n  IDKey extends PropertyKey = string,\r\n  ID = any\r\n> extends Storable {\r\n  // TODO: check to be writable\r\n  @enumerable(false)\r\n  private __col__: Array<string> = [];\r\n\r\n  @enumerable(false)\r\n  private __idCol__?: IDKey;\r\n\r\n  @enumerable(false)\r\n  private __idValue__?: ID;\r\n\r\n  constructor(\r\n    options,\r\n    $repository: Repository<any, any>\r\n  ) {\r\n    super($repository);\r\n\r\n    if (this.__idCol__) {\r\n      Reflect.deleteProperty(this, '__idValue__');\r\n      Reflect.defineProperty(this, '__idValue__', {\r\n        value: options[this.__idCol__],\r\n        writable: true,\r\n        enumerable: false\r\n      });\r\n\r\n      Reflect.deleteProperty(this, this.__idCol__);\r\n      Reflect.defineProperty(this, this.__idCol__, {\r\n        get: () => this.__idValue__,\r\n        set: v => this.__idValue__ = v,\r\n        enumerable: true\r\n      });\r\n    }\r\n  }\r\n\r\n  @enumerable(false)\r\n  public $save(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  @enumerable(false)\r\n  public $delete(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public static Column(target: typeof Entity['prototype'], key: string) {\r\n    if (!target.__col__)\r\n      target.__col__ = [];\r\n\r\n    target.__col__.push(key);\r\n  }\r\n\r\n  public static ID(target: typeof Entity['prototype'], key: string) {\r\n    target.__idCol__ = key;\r\n  }\r\n}\r\n\r\nexport const Column = Entity.Column;\r\nexport const ID = Entity.ID;\r\n","import { enumerable } from '../decorators';\r\nimport { Repository } from '../repository';\r\nimport { Storable } from './storable';\r\n\r\nexport class Record extends Storable {\r\n  constructor(\r\n    options,\r\n    $repository: Repository<any, any>\r\n  ) {\r\n    super($repository);\r\n  }\r\n\r\n  @enumerable(false)\r\n  public $save(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  @enumerable(false)\r\n  public $delete(): Promise<void> {\r\n    /* TODO */\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n","import { RecordDataMap } from '../apiMap';\r\nimport { QueryResult } from '../queryResult';\r\nimport { IStorableConstructor, Record } from '../storable';\r\nimport { FromSecArg, Repository } from './base';\r\n\r\nexport interface IRecordRepoMethods<\r\n  C extends IStorableConstructor<E>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0]= ConstructorParameters<C>[0]\r\n> {\r\n  create(\r\n    options: A,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  read(\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  update(\r\n    options: Partial<A>,\r\n    apiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  delete(\r\n    deleteApiOptions?: any\r\n  ): Promise<any>;\r\n\r\n  //...\r\n  // TODO - other methods?\r\n}\r\n\r\n/**\r\n * A single-entity repository.\r\n *\r\n * @template `DM` API data map for the repo\r\n * @template `C` entity constructor type\r\n * @template `E` entity instance type\r\n * @template `A` entity constructor parameter options\r\n */\r\nexport class RecordRepository<\r\n  DM extends RecordDataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Record = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0]= ConstructorParameters<C>[0],\r\n> extends Repository<DM, C, E, A> implements IRecordRepoMethods<C, E ,A> {\r\n  public async create(\r\n    options: A,\r\n    apiOptions?: FromSecArg<DM['create']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async update(\r\n    options: Partial<A>,\r\n    apiOptions?: FromSecArg<DM['update']> | false\r\n  ) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async read(apiOptions?: FromSecArg<DM['read']> | false) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n\r\n  public async delete(apiOptions?: FromSecArg<DM['delete']> | false) {\r\n    throw new Error('Not implemented');\r\n\r\n    return new QueryResult(/* TODO: implement this */\r\n      true,\r\n      this.makeDataInstance({} as any)\r\n    );\r\n  }\r\n}\r\n","import { DataMap, EntityDataMap, RecordDataMap } from '../apiMap';\r\nimport { print } from '../debug';\r\nimport { Entity, IStorableConstructor, Record, Storable } from '../storable';\r\nimport { IRepoConnection } from './base';\r\nimport { BrokenRepository } from './broken';\r\nimport { EntityRepository } from './entity';\r\nimport { RecordRepository } from './record';\r\n\r\nexport function makeRepository<\r\n  DM extends DataMap<C>,\r\n  C extends IStorableConstructor<E>,\r\n  E extends Storable = InstanceType<C>,\r\n  A extends ConstructorParameters<C>[0] = ConstructorParameters<C>[0],\r\n>(\r\n  name: string,\r\n  connection: IRepoConnection<DM>,\r\n  data: C\r\n): DM extends EntityDataMap<C> ? (\r\n  E extends Entity ? EntityRepository<DM, C, E, A> : BrokenRepository<DM>\r\n) : DM extends RecordDataMap<C> ? (\r\n  E extends Record ? RecordRepository<DM, C, E, A> : BrokenRepository<DM>\r\n) : BrokenRepository<DM> {\r\n  let Repo: any = BrokenRepository;\r\n\r\n  if (data.prototype instanceof Entity) {\r\n    Repo = EntityRepository;\r\n  } else if (data.prototype instanceof Record) {\r\n    Repo = RecordRepository;\r\n  } else {\r\n    print(\r\n      connection.name,\r\n      'db',\r\n      `No suitable repository found for \"${data.name}\".`,\r\n      'error'\r\n    );\r\n  }\r\n\r\n  return new Repo(name, connection, data);\r\n}\r\n","import { ApiMap, RepoFromDataMap } from '../apiMap';\r\nimport { Debug, Debugable, debugMap, DebugState, debugState, DebugType, ExceptionType, setDebugState } from '../debug';\r\nimport { Driver, IDriverConstructor } from '../drivers';\r\nimport { FallbackDriver } from '../drivers/fallback';\r\nimport { MultiDriver } from '../drivers/multiDriver';\r\nimport { makeRepository } from '../repository';\r\nimport { IStorableConstructor } from '../storable';\r\n\r\nexport interface IRepositoryMap {\r\n  [name: string]: IStorableConstructor<any>;\r\n}\r\n\r\ntype PropFrom<O, Key> = Key extends keyof O ? O[Key] : any;\r\n\r\nexport type RepoStore<M extends IRepositoryMap, A extends ApiMap<M>> = {\r\n  [Name in (keyof M | keyof A)]: RepoFromDataMap<PropFrom<M, Name>, PropFrom<A, Name>>;\r\n};\r\n\r\nexport class Connection<\r\n  RM extends IRepositoryMap = IRepositoryMap,\r\n  AM extends ApiMap<RM> = ApiMap<RM>,\r\n> extends Debugable {\r\n  protected $debugType: DebugType = `connection`;\r\n  protected $connectionName: string = this.name;\r\n\r\n  // TODO\r\n  // public static readonly plugins: WEBALORM.IPlugin[] = [];\r\n\r\n  /**\r\n   * The driver currently used for operations with entities\r\n   */\r\n  public currentDriver: Driver;\r\n\r\n  /**\r\n   * A current map of bound repositories\r\n   */\r\n  public repositories: RepoStore<RM, AM> = {} as any;\r\n\r\n  /**\r\n   * Creates a WEBALORM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public drivers: IDriverConstructor[] | MultiDriver,\r\n    repositories: RM,\r\n    public readonly apiMap?: AM\r\n  ) {\r\n    super();\r\n\r\n    if (!apiMap) {\r\n      Debug.$warn('The main webalorm functionality is disabled. Are you sure you want to use this without API?', true);\r\n    }\r\n\r\n    try {\r\n      if (Array.isArray(drivers)) {\r\n        // Select the first supported driver from the bunch\r\n        const SupportedDrivers = drivers.filter(d => d.isSupported);\r\n        if (SupportedDrivers.length > 0) {\r\n          this.currentDriver = new SupportedDrivers[0](this);\r\n        } else {\r\n          throw new TypeError('No supported driver provided. Using fallback.');\r\n        }\r\n      } else if (drivers instanceof MultiDriver) {\r\n        this.currentDriver = drivers;\r\n      } else {\r\n        throw new TypeError('No supported driver provided. Using fallback.');\r\n      }\r\n\r\n      this.$log(`Using driver \"${this.currentDriver.constructor.name}\"`);\r\n    } catch (e) {\r\n      this.$error(e.message, true);\r\n\r\n      this.currentDriver = new FallbackDriver(this);\r\n    }\r\n\r\n    let reProxy;\r\n\r\n    if (!Proxy) {\r\n      this.$warn(`window.Proxy is unavailable. Using insufficient property forwarding.`);\r\n\r\n      reProxy = (repoName: string) => Object.defineProperty(this, repoName, {\r\n        get: () => this.repositories[repoName],\r\n      });\r\n    }\r\n\r\n    for (const repoName in repositories) {\r\n      const name: string = repoName;\r\n      const entityConstructor = repositories[name];\r\n\r\n      this.repositories[name] = makeRepository(name, {\r\n        name: this.name,\r\n        apiMap: this.apiMap && this.apiMap[name] as any,\r\n        currentDriver: this.currentDriver,\r\n      }, entityConstructor);\r\n\r\n      reProxy && reProxy(name);\r\n    }\r\n\r\n    if (Proxy) {\r\n      this.$log(`window.Proxy is available. Using modern property forwarding.`);\r\n\r\n      return new Proxy(this, {\r\n        get(target, key: string) {\r\n          if (!target.repositories[key]) {\r\n            if (!target[key]) {\r\n              target.$log(\r\n                `Repository \"${key}\" is not registered upon initialization. No other property with the same name was found.`\r\n              );\r\n            }\r\n\r\n            return target[key];\r\n          }\r\n\r\n          return target.repositories[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //#region Debug\r\n\r\n  /**\r\n   * Returns a truthy value if debug is currently enabled\r\n   *\r\n   * Returns a falsy value if debug is currently disabled\r\n   */\r\n  public static $debug(): DebugState;\r\n  /**\r\n   * Enable or disable all debug logs\r\n   */\r\n  public static $debug(enabled: boolean): void;\r\n  /**\r\n   * Enable or disable all debug logs.\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(enabled: boolean, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   */\r\n  public static $debug(type: DebugType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: DebugType, exceptions: ExceptionType): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   */\r\n  public static $debug(type: string): void;\r\n  /**\r\n   * Enable a certain debug option for WEBALORM\r\n   *\r\n   * Allows specifying different debug types:\r\n   *\r\n   * - `soft` - informative, only logs to console\r\n   * - `hard` - throws exceptions, forcing proper error-handling\r\n   */\r\n  public static $debug(type: string, exceptions: ExceptionType): void;\r\n  public static $debug(type?: boolean | string, exceptions?: ExceptionType) {\r\n    if (typeof type === 'undefined') {\r\n      return debugState;\r\n    }\r\n\r\n    if (typeof type === 'boolean') {\r\n      setDebugState(type ? 'enabled' : 'disabled');\r\n      debugMap['*'] = exceptions || type;\r\n    } else {\r\n      setDebugState('custom');\r\n\r\n      debugMap[type] = exceptions || !debugMap[type];\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { ApiMap } from '../apiMap';\r\nimport { IDriverConstructor } from '../drivers';\r\nimport { Connection as connection, IRepositoryMap, RepoStore } from './connection';\r\n\r\nexport const Connection = connection as {\r\n  /**\r\n   * Creates a WEBALORM connection instance.\r\n   * @param name the name of the connection to the storage. Namespaces all respositories invoked from the instance.\r\n   * @param drivers determine a variety of drivers the orm can select from. The first one that fits for the environment is selected.\r\n   * @param repositories sets the relation of a repository name to its contents' prototype.\r\n   * @param apiMap maps the API calls onto the current data structure.\r\n   */\r\n  new <\r\n    RM extends IRepositoryMap = IRepositoryMap,\r\n    AM extends ApiMap<RM> = ApiMap<RM>\r\n  >(\r\n      name: string,\r\n      drivers: IDriverConstructor[],\r\n      repositories: RM,\r\n      apiMap?: AM\r\n  ): connection<RM, AM> & RepoStore<RM, AM>;\r\n} & typeof connection;\r\n\r\nexport type Connection<\r\n  RM extends IRepositoryMap = any,\r\n  AM extends ApiMap<RM> = any\r\n> = connection<RM, AM>;\r\n\r\nexport * from './namespace';\r\n\r\n"],"names":["tslib_1.__decorate","tslib_1.__extends","Connection","connection"],"mappings":"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"}